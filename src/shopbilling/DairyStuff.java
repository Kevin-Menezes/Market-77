/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package shopbilling;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.sql.*;
import java.util.logging.Level;
import java.util.logging.Logger;

          
public class DairyStuff extends javax.swing.JFrame {
    
    String UserTable; // USERNAME FROM MAIN PAGE 
    int count;
    
    String Item1Name; float Item1Cost; byte[] Item1Img; float Item1Availability; int Item1Discount; // GLOBAL VARIABLES OF ITEM1
    
    String Item2Name; float Item2Cost; byte[] Item2Img; float Item2Availability; int Item2Discount; // GLOBAL VARIABLES OF ITEM2
    
    String Item3Name; float Item3Cost; byte[] Item3Img; float Item3Availability; int Item3Discount; // GLOBAL VARIABLES OF ITEM3
    
    String Item4Name; float Item4Cost; byte[] Item4Img; float Item4Availability; int Item4Discount; // GLOBAL VARIABLES OF ITEM4
    
    String Item5Name; float Item5Cost; byte[] Item5Img; float Item5Availability; int Item5Discount; // GLOBAL VARIABLES OF ITEM5
    
    String Item6Name; float Item6Cost; byte[] Item6Img; float Item6Availability; int Item6Discount; // GLOBAL VARIABLES OF ITEM6
    
    String Item7Name; float Item7Cost; byte[] Item7Img; float Item7Availability; int Item7Discount; // GLOBAL VARIABLES OF ITEM7
    
    String Item8Name; float Item8Cost; byte[] Item8Img; float Item8Availability; int Item8Discount; // GLOBAL VARIABLES OF ITEM8
    
    String Item9Name; float Item9Cost; byte[] Item9Img; float Item9Availability; int Item9Discount; // GLOBAL VARIABLES OF ITEM9
    
    String Item10Name; float Item10Cost; byte[] Item10Img; float Item10Availability; int Item10Discount; // GLOBAL VARIABLES OF ITEM10
   
       
    public DairyStuff(String UserFromLogin) {  // TAKING USERNAME FROM MAIN PAGE AND USING IT HERE FOR THE DATABASE TABLE NAME WHICH IS LINKED TO THE ACCOUNT
             
        initComponents();
        
        //---------------------------------------------- APP ICON --------------------------------------------------------------
        ImageIcon icon = new ImageIcon("E:\\SIES Practicals\\JAVA SWING\\SHOP_BILLING_PROJECT\\ShopBilling\\src\\shopbilling\\Dairy_Stuff.png");
        this.setIconImage(icon.getImage());
        
        CartItem1Label.setVisible(false);// INITIALLY MAKING "ADD TO CART" OF ITEM1 NOT VISIBLE
        CartItem2Label.setVisible(false);// INITIALLY MAKING "ADD TO CART" OF ITEM2 NOT VISIBLE
        CartItem3Label.setVisible(false);// INITIALLY MAKING "ADD TO CART" OF ITEM3 NOT VISIBLE
        CartItem4Label.setVisible(false);// INITIALLY MAKING "ADD TO CART" OF ITEM4 NOT VISIBLE
        CartItem5Label.setVisible(false);// INITIALLY MAKING "ADD TO CART" OF ITEM5 NOT VISIBLE
        CartItem6Label.setVisible(false);// INITIALLY MAKING "ADD TO CART" OF ITEM6 NOT VISIBLE
        CartItem7Label.setVisible(false);// INITIALLY MAKING "ADD TO CART" OF ITEM7 NOT VISIBLE
        CartItem8Label.setVisible(false);// INITIALLY MAKING "ADD TO CART" OF ITEM8 NOT VISIBLE
        CartItem9Label.setVisible(false);// INITIALLY MAKING "ADD TO CART" OF ITEM9 NOT VISIBLE
        CartItem10Label.setVisible(false);// INITIALLY MAKING "ADD TO CART" OF ITEM10 NOT VISIBLE
        
        UserTable = UserFromLogin; // PUTTING USERNAME IN A VARIABLE
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        BasePanel = new javax.swing.JPanel();
        DailyStaples = new javax.swing.JLabel();
        DairyStuff = new javax.swing.JLabel();
        PackagedFood = new javax.swing.JLabel();
        Vegetables = new javax.swing.JLabel();
        Snacks = new javax.swing.JLabel();
        Fruits = new javax.swing.JLabel();
        PersonalCare = new javax.swing.JLabel();
        Beverages = new javax.swing.JLabel();
        CART = new javax.swing.JLabel();
        CARTNUMBER = new javax.swing.JLabel();
        RedCross = new javax.swing.JLabel();
        Item1Panel = new javax.swing.JPanel();
        Item1Image = new javax.swing.JLabel();
        CartItem1Label = new javax.swing.JLabel();
        Item1Label = new javax.swing.JLabel();
        Item1PriceLabel = new javax.swing.JLabel();
        Item1DiscountLabel = new javax.swing.JLabel();
        Item2Panel = new javax.swing.JPanel();
        Item2Image = new javax.swing.JLabel();
        CartItem2Label = new javax.swing.JLabel();
        Item2Label = new javax.swing.JLabel();
        Item2PriceLabel = new javax.swing.JLabel();
        Item2DiscountLabel = new javax.swing.JLabel();
        Item3Panel = new javax.swing.JPanel();
        Item3Image = new javax.swing.JLabel();
        CartItem3Label = new javax.swing.JLabel();
        Item3Label = new javax.swing.JLabel();
        Item3PriceLabel = new javax.swing.JLabel();
        Item3DiscountLabel = new javax.swing.JLabel();
        Item4Panel = new javax.swing.JPanel();
        Item4Image = new javax.swing.JLabel();
        CartItem4Label = new javax.swing.JLabel();
        Item4Label = new javax.swing.JLabel();
        Item4PriceLabel = new javax.swing.JLabel();
        Item4DiscountLabel = new javax.swing.JLabel();
        Item5Panel = new javax.swing.JPanel();
        Item5Image = new javax.swing.JLabel();
        CartItem5Label = new javax.swing.JLabel();
        Item5Label = new javax.swing.JLabel();
        Item5PriceLabel = new javax.swing.JLabel();
        Item5DiscountLabel = new javax.swing.JLabel();
        Item6Panel = new javax.swing.JPanel();
        Item6Image = new javax.swing.JLabel();
        CartItem6Label = new javax.swing.JLabel();
        Item6Label = new javax.swing.JLabel();
        Item6PriceLabel = new javax.swing.JLabel();
        Item6DiscountLabel = new javax.swing.JLabel();
        Item7Panel = new javax.swing.JPanel();
        Item7Image = new javax.swing.JLabel();
        CartItem7Label = new javax.swing.JLabel();
        Item7Label = new javax.swing.JLabel();
        Item7PriceLabel = new javax.swing.JLabel();
        Item7DiscountLabel = new javax.swing.JLabel();
        Item8Panel = new javax.swing.JPanel();
        Item8Image = new javax.swing.JLabel();
        CartItem8Label = new javax.swing.JLabel();
        Item8Label = new javax.swing.JLabel();
        Item8PriceLabel = new javax.swing.JLabel();
        Item8DiscountLabel = new javax.swing.JLabel();
        Item9Panel = new javax.swing.JPanel();
        Item9Image = new javax.swing.JLabel();
        CartItem9Label = new javax.swing.JLabel();
        Item9Label = new javax.swing.JLabel();
        Item9PriceLabel = new javax.swing.JLabel();
        Item9DiscountLabel = new javax.swing.JLabel();
        Item10Panel = new javax.swing.JPanel();
        Item10Image = new javax.swing.JLabel();
        CartItem10Label = new javax.swing.JLabel();
        Item10Label = new javax.swing.JLabel();
        Item10PriceLabel = new javax.swing.JLabel();
        Item10DiscountLabel = new javax.swing.JLabel();
        TableBg = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Daily Staples");
        setMinimumSize(new java.awt.Dimension(1970, 1080));
        setUndecorated(true);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        BasePanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        DailyStaples.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        DailyStaples.setForeground(new java.awt.Color(0, 0, 0));
        DailyStaples.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        DailyStaples.setText("Daily Staples");
        DailyStaples.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 4, true));
        DailyStaples.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        DailyStaples.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                DailyStaplesMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                DailyStaplesMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                DailyStaplesMouseExited(evt);
            }
        });
        BasePanel.add(DailyStaples, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 25, 140, 50));

        DairyStuff.setBackground(new java.awt.Color(244, 67, 54));
        DairyStuff.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        DairyStuff.setForeground(new java.awt.Color(0, 0, 0));
        DairyStuff.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        DairyStuff.setText("DAIRY STUFF");
        DairyStuff.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 4, true));
        DairyStuff.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        DairyStuff.setOpaque(true);
        DairyStuff.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                DairyStuffMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                DairyStuffMouseExited(evt);
            }
        });
        BasePanel.add(DairyStuff, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 15, 180, 70));

        PackagedFood.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        PackagedFood.setForeground(new java.awt.Color(0, 0, 0));
        PackagedFood.setText("  Packaged Food");
        PackagedFood.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 4, true));
        PackagedFood.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        PackagedFood.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                PackagedFoodMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                PackagedFoodMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                PackagedFoodMouseExited(evt);
            }
        });
        BasePanel.add(PackagedFood, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 25, 160, 50));

        Vegetables.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        Vegetables.setForeground(new java.awt.Color(0, 0, 0));
        Vegetables.setText("   Vegetables");
        Vegetables.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 4, true));
        Vegetables.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Vegetables.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                VegetablesMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                VegetablesMouseExited(evt);
            }
        });
        BasePanel.add(Vegetables, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 25, 140, 50));

        Snacks.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        Snacks.setForeground(new java.awt.Color(0, 0, 0));
        Snacks.setText("      Snacks");
        Snacks.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 4, true));
        Snacks.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Snacks.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                SnacksMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                SnacksMouseExited(evt);
            }
        });
        BasePanel.add(Snacks, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 25, 130, 50));

        Fruits.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        Fruits.setForeground(new java.awt.Color(0, 0, 0));
        Fruits.setText("       Fruits");
        Fruits.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 4, true));
        Fruits.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Fruits.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                FruitsMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                FruitsMouseExited(evt);
            }
        });
        BasePanel.add(Fruits, new org.netbeans.lib.awtextra.AbsoluteConstraints(990, 25, 130, 50));

        PersonalCare.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        PersonalCare.setForeground(new java.awt.Color(0, 0, 0));
        PersonalCare.setText("  Personal Care");
        PersonalCare.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 4, true));
        PersonalCare.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        PersonalCare.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                PersonalCareMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                PersonalCareMouseExited(evt);
            }
        });
        BasePanel.add(PersonalCare, new org.netbeans.lib.awtextra.AbsoluteConstraints(1160, 25, 150, 50));

        Beverages.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        Beverages.setForeground(new java.awt.Color(0, 0, 0));
        Beverages.setText("   Beverages");
        Beverages.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 4, true));
        Beverages.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Beverages.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                BeveragesMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                BeveragesMouseExited(evt);
            }
        });
        BasePanel.add(Beverages, new org.netbeans.lib.awtextra.AbsoluteConstraints(1350, 25, 130, 50));

        CART.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        CART.setForeground(new java.awt.Color(0, 0, 0));
        CART.setText("   Cart");
        CART.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 4, true));
        CART.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        CART.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CARTMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                CARTMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                CARTMouseExited(evt);
            }
        });
        BasePanel.add(CART, new org.netbeans.lib.awtextra.AbsoluteConstraints(1670, 25, 75, 50));

        CARTNUMBER.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        CARTNUMBER.setForeground(new java.awt.Color(0, 0, 0));
        CARTNUMBER.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        CARTNUMBER.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 4));
        BasePanel.add(CARTNUMBER, new org.netbeans.lib.awtextra.AbsoluteConstraints(1741, 25, 60, 50));

        RedCross.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shopbilling/Back_home.png"))); // NOI18N
        RedCross.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        RedCross.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                RedCrossMouseClicked(evt);
            }
        });
        BasePanel.add(RedCross, new org.netbeans.lib.awtextra.AbsoluteConstraints(1840, 10, 70, 70));

        Item1Panel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 4, true));
        Item1Panel.setOpaque(false);
        Item1Panel.setVerifyInputWhenFocusTarget(false);
        Item1Panel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        Item1Panel.add(Item1Image, new org.netbeans.lib.awtextra.AbsoluteConstraints(83, 30, 170, 200));

        CartItem1Label.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        CartItem1Label.setForeground(new java.awt.Color(0, 0, 0));
        CartItem1Label.setText("         ADD TO CART");
        CartItem1Label.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 4, true));
        CartItem1Label.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        CartItem1Label.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CartItem1LabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                CartItem1LabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                CartItem1LabelMouseExited(evt);
            }
        });
        Item1Panel.add(CartItem1Label, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 240, 300, 90));

        Item1Label.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        Item1Label.setForeground(new java.awt.Color(0, 0, 0));
        Item1Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Item1Label.setText("   ");
        Item1Label.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 4, true));
        Item1Label.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Item1Label.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                Item1LabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                Item1LabelMouseExited(evt);
            }
        });
        Item1Panel.add(Item1Label, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 240, 300, 90));

        Item1PriceLabel.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        Item1PriceLabel.setForeground(new java.awt.Color(0, 0, 0));
        Item1PriceLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Item1PriceLabel.setText("   ");
        Item1PriceLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 4));
        Item1Panel.add(Item1PriceLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 0, 70, 50));

        Item1DiscountLabel.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        Item1DiscountLabel.setForeground(new java.awt.Color(0, 0, 0));
        Item1DiscountLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Item1Panel.add(Item1DiscountLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 70, 60));

        BasePanel.add(Item1Panel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 180, 300, 330));

        Item2Panel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 4, true));
        Item2Panel.setOpaque(false);
        Item2Panel.setVerifyInputWhenFocusTarget(false);
        Item2Panel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        Item2Panel.add(Item2Image, new org.netbeans.lib.awtextra.AbsoluteConstraints(45, 30, 218, 200));

        CartItem2Label.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        CartItem2Label.setForeground(new java.awt.Color(0, 0, 0));
        CartItem2Label.setText("         ADD TO CART");
        CartItem2Label.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 4, true));
        CartItem2Label.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        CartItem2Label.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CartItem2LabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                CartItem2LabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                CartItem2LabelMouseExited(evt);
            }
        });
        Item2Panel.add(CartItem2Label, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 240, 300, 90));

        Item2Label.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        Item2Label.setForeground(new java.awt.Color(0, 0, 0));
        Item2Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Item2Label.setText("   ");
        Item2Label.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 4, true));
        Item2Label.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Item2Label.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                Item2LabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                Item2LabelMouseExited(evt);
            }
        });
        Item2Panel.add(Item2Label, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 240, 300, 90));

        Item2PriceLabel.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        Item2PriceLabel.setForeground(new java.awt.Color(0, 0, 0));
        Item2PriceLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Item2PriceLabel.setText("   ");
        Item2PriceLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 4));
        Item2Panel.add(Item2PriceLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 0, 70, 50));

        Item2DiscountLabel.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        Item2DiscountLabel.setForeground(new java.awt.Color(0, 0, 0));
        Item2DiscountLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Item2Panel.add(Item2DiscountLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 70, 60));

        BasePanel.add(Item2Panel, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 180, 300, 330));

        Item3Panel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 4, true));
        Item3Panel.setOpaque(false);
        Item3Panel.setVerifyInputWhenFocusTarget(false);
        Item3Panel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        Item3Panel.add(Item3Image, new org.netbeans.lib.awtextra.AbsoluteConstraints(52, 32, 200, 200));

        CartItem3Label.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        CartItem3Label.setForeground(new java.awt.Color(0, 0, 0));
        CartItem3Label.setText("         ADD TO CART");
        CartItem3Label.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 4, true));
        CartItem3Label.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        CartItem3Label.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CartItem3LabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                CartItem3LabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                CartItem3LabelMouseExited(evt);
            }
        });
        Item3Panel.add(CartItem3Label, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 240, 300, 90));

        Item3Label.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        Item3Label.setForeground(new java.awt.Color(0, 0, 0));
        Item3Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Item3Label.setText("   ");
        Item3Label.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 4, true));
        Item3Label.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Item3Label.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                Item3LabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                Item3LabelMouseExited(evt);
            }
        });
        Item3Panel.add(Item3Label, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 240, 300, 90));

        Item3PriceLabel.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        Item3PriceLabel.setForeground(new java.awt.Color(0, 0, 0));
        Item3PriceLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Item3PriceLabel.setText("   ");
        Item3PriceLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 4));
        Item3Panel.add(Item3PriceLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 0, 70, 50));

        Item3DiscountLabel.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        Item3DiscountLabel.setForeground(new java.awt.Color(0, 0, 0));
        Item3DiscountLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Item3Panel.add(Item3DiscountLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 70, 60));

        BasePanel.add(Item3Panel, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 180, 300, 330));

        Item4Panel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 4, true));
        Item4Panel.setOpaque(false);
        Item4Panel.setVerifyInputWhenFocusTarget(false);
        Item4Panel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        Item4Panel.add(Item4Image, new org.netbeans.lib.awtextra.AbsoluteConstraints(56, 30, 200, 200));

        CartItem4Label.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        CartItem4Label.setForeground(new java.awt.Color(0, 0, 0));
        CartItem4Label.setText("         ADD TO CART");
        CartItem4Label.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 4, true));
        CartItem4Label.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        CartItem4Label.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CartItem4LabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                CartItem4LabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                CartItem4LabelMouseExited(evt);
            }
        });
        Item4Panel.add(CartItem4Label, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 240, 300, 90));

        Item4Label.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        Item4Label.setForeground(new java.awt.Color(0, 0, 0));
        Item4Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Item4Label.setText("   ");
        Item4Label.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 4, true));
        Item4Label.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Item4Label.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                Item4LabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                Item4LabelMouseExited(evt);
            }
        });
        Item4Panel.add(Item4Label, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 240, 300, 90));

        Item4PriceLabel.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        Item4PriceLabel.setForeground(new java.awt.Color(0, 0, 0));
        Item4PriceLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Item4PriceLabel.setText("   ");
        Item4PriceLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 4));
        Item4Panel.add(Item4PriceLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 0, 70, 50));

        Item4DiscountLabel.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        Item4DiscountLabel.setForeground(new java.awt.Color(0, 0, 0));
        Item4DiscountLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Item4Panel.add(Item4DiscountLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 70, 60));

        BasePanel.add(Item4Panel, new org.netbeans.lib.awtextra.AbsoluteConstraints(1200, 180, 300, 330));

        Item5Panel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 4, true));
        Item5Panel.setOpaque(false);
        Item5Panel.setVerifyInputWhenFocusTarget(false);
        Item5Panel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        Item5Panel.add(Item5Image, new org.netbeans.lib.awtextra.AbsoluteConstraints(55, 40, 200, 200));

        CartItem5Label.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        CartItem5Label.setForeground(new java.awt.Color(0, 0, 0));
        CartItem5Label.setText("         ADD TO CART");
        CartItem5Label.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 4, true));
        CartItem5Label.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        CartItem5Label.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CartItem5LabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                CartItem5LabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                CartItem5LabelMouseExited(evt);
            }
        });
        Item5Panel.add(CartItem5Label, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 240, 300, 90));

        Item5Label.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        Item5Label.setForeground(new java.awt.Color(0, 0, 0));
        Item5Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Item5Label.setText("   ");
        Item5Label.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 4, true));
        Item5Label.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Item5Label.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                Item5LabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                Item5LabelMouseExited(evt);
            }
        });
        Item5Panel.add(Item5Label, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 240, 300, 90));

        Item5PriceLabel.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        Item5PriceLabel.setForeground(new java.awt.Color(0, 0, 0));
        Item5PriceLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Item5PriceLabel.setText("   ");
        Item5PriceLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 4));
        Item5Panel.add(Item5PriceLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 0, 70, 50));

        Item5DiscountLabel.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        Item5DiscountLabel.setForeground(new java.awt.Color(0, 0, 0));
        Item5DiscountLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Item5Panel.add(Item5DiscountLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 70, 60));

        BasePanel.add(Item5Panel, new org.netbeans.lib.awtextra.AbsoluteConstraints(1600, 180, 300, 330));

        Item6Panel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 4, true));
        Item6Panel.setOpaque(false);
        Item6Panel.setVerifyInputWhenFocusTarget(false);
        Item6Panel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        Item6Panel.add(Item6Image, new org.netbeans.lib.awtextra.AbsoluteConstraints(42, 33, 200, 200));

        CartItem6Label.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        CartItem6Label.setForeground(new java.awt.Color(0, 0, 0));
        CartItem6Label.setText("         ADD TO CART");
        CartItem6Label.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 4, true));
        CartItem6Label.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        CartItem6Label.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CartItem6LabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                CartItem6LabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                CartItem6LabelMouseExited(evt);
            }
        });
        Item6Panel.add(CartItem6Label, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 240, 300, 90));

        Item6Label.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        Item6Label.setForeground(new java.awt.Color(0, 0, 0));
        Item6Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Item6Label.setText("   ");
        Item6Label.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 4, true));
        Item6Label.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Item6Label.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                Item6LabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                Item6LabelMouseExited(evt);
            }
        });
        Item6Panel.add(Item6Label, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 240, 300, 90));

        Item6PriceLabel.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        Item6PriceLabel.setForeground(new java.awt.Color(0, 0, 0));
        Item6PriceLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Item6PriceLabel.setText("   ");
        Item6PriceLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 4));
        Item6Panel.add(Item6PriceLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 0, 70, 50));

        Item6DiscountLabel.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        Item6DiscountLabel.setForeground(new java.awt.Color(0, 0, 0));
        Item6DiscountLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Item6Panel.add(Item6DiscountLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 70, 60));

        BasePanel.add(Item6Panel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 600, 300, 330));

        Item7Panel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 4, true));
        Item7Panel.setOpaque(false);
        Item7Panel.setVerifyInputWhenFocusTarget(false);
        Item7Panel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        Item7Panel.add(Item7Image, new org.netbeans.lib.awtextra.AbsoluteConstraints(35, 34, 250, 200));

        CartItem7Label.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        CartItem7Label.setForeground(new java.awt.Color(0, 0, 0));
        CartItem7Label.setText("         ADD TO CART");
        CartItem7Label.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 4, true));
        CartItem7Label.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        CartItem7Label.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CartItem7LabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                CartItem7LabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                CartItem7LabelMouseExited(evt);
            }
        });
        Item7Panel.add(CartItem7Label, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 240, 300, 90));

        Item7Label.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        Item7Label.setForeground(new java.awt.Color(0, 0, 0));
        Item7Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Item7Label.setText("   ");
        Item7Label.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 4, true));
        Item7Label.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Item7Label.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                Item7LabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                Item7LabelMouseExited(evt);
            }
        });
        Item7Panel.add(Item7Label, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 240, 300, 90));

        Item7PriceLabel.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        Item7PriceLabel.setForeground(new java.awt.Color(0, 0, 0));
        Item7PriceLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Item7PriceLabel.setText("   ");
        Item7PriceLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 4));
        Item7Panel.add(Item7PriceLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 0, 70, 50));

        Item7DiscountLabel.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        Item7DiscountLabel.setForeground(new java.awt.Color(0, 0, 0));
        Item7DiscountLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Item7Panel.add(Item7DiscountLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 70, 60));

        BasePanel.add(Item7Panel, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 600, 300, 330));

        Item8Panel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 4, true));
        Item8Panel.setOpaque(false);
        Item8Panel.setVerifyInputWhenFocusTarget(false);
        Item8Panel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        Item8Panel.add(Item8Image, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 30, 170, 200));

        CartItem8Label.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        CartItem8Label.setForeground(new java.awt.Color(0, 0, 0));
        CartItem8Label.setText("         ADD TO CART");
        CartItem8Label.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 4, true));
        CartItem8Label.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        CartItem8Label.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CartItem8LabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                CartItem8LabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                CartItem8LabelMouseExited(evt);
            }
        });
        Item8Panel.add(CartItem8Label, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 240, 300, 90));

        Item8Label.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        Item8Label.setForeground(new java.awt.Color(0, 0, 0));
        Item8Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Item8Label.setText("   ");
        Item8Label.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 4, true));
        Item8Label.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Item8Label.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                Item8LabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                Item8LabelMouseExited(evt);
            }
        });
        Item8Panel.add(Item8Label, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 240, 300, 90));

        Item8PriceLabel.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        Item8PriceLabel.setForeground(new java.awt.Color(0, 0, 0));
        Item8PriceLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Item8PriceLabel.setText("   ");
        Item8PriceLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 4));
        Item8Panel.add(Item8PriceLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 0, 70, 50));

        Item8DiscountLabel.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        Item8DiscountLabel.setForeground(new java.awt.Color(0, 0, 0));
        Item8DiscountLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Item8Panel.add(Item8DiscountLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 70, 60));

        BasePanel.add(Item8Panel, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 600, 300, 330));

        Item9Panel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 4, true));
        Item9Panel.setOpaque(false);
        Item9Panel.setVerifyInputWhenFocusTarget(false);
        Item9Panel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        Item9Panel.add(Item9Image, new org.netbeans.lib.awtextra.AbsoluteConstraints(55, 75, 200, 160));

        CartItem9Label.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        CartItem9Label.setForeground(new java.awt.Color(0, 0, 0));
        CartItem9Label.setText("         ADD TO CART");
        CartItem9Label.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 4, true));
        CartItem9Label.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        CartItem9Label.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CartItem9LabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                CartItem9LabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                CartItem9LabelMouseExited(evt);
            }
        });
        Item9Panel.add(CartItem9Label, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 240, 300, 90));

        Item9Label.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        Item9Label.setForeground(new java.awt.Color(0, 0, 0));
        Item9Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Item9Label.setText("   ");
        Item9Label.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 4, true));
        Item9Label.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Item9Label.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                Item9LabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                Item9LabelMouseExited(evt);
            }
        });
        Item9Panel.add(Item9Label, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 240, 300, 90));

        Item9PriceLabel.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        Item9PriceLabel.setForeground(new java.awt.Color(0, 0, 0));
        Item9PriceLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Item9PriceLabel.setText("   ");
        Item9PriceLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 4));
        Item9Panel.add(Item9PriceLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 0, 70, 50));

        Item9DiscountLabel.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        Item9DiscountLabel.setForeground(new java.awt.Color(0, 0, 0));
        Item9DiscountLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Item9Panel.add(Item9DiscountLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 70, 60));

        BasePanel.add(Item9Panel, new org.netbeans.lib.awtextra.AbsoluteConstraints(1200, 600, 300, 330));

        Item10Panel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 4, true));
        Item10Panel.setOpaque(false);
        Item10Panel.setVerifyInputWhenFocusTarget(false);
        Item10Panel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        Item10Panel.add(Item10Image, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 30, 170, 200));

        CartItem10Label.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        CartItem10Label.setForeground(new java.awt.Color(0, 0, 0));
        CartItem10Label.setText("         ADD TO CART");
        CartItem10Label.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 4, true));
        CartItem10Label.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        CartItem10Label.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CartItem10LabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                CartItem10LabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                CartItem10LabelMouseExited(evt);
            }
        });
        Item10Panel.add(CartItem10Label, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 240, 300, 90));

        Item10Label.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        Item10Label.setForeground(new java.awt.Color(0, 0, 0));
        Item10Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Item10Label.setText("   ");
        Item10Label.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 4, true));
        Item10Label.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Item10Label.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                Item10LabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                Item10LabelMouseExited(evt);
            }
        });
        Item10Panel.add(Item10Label, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 240, 300, 90));

        Item10PriceLabel.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        Item10PriceLabel.setForeground(new java.awt.Color(0, 0, 0));
        Item10PriceLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Item10PriceLabel.setText("   ");
        Item10PriceLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 4));
        Item10Panel.add(Item10PriceLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 0, 70, 50));

        Item10DiscountLabel.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        Item10DiscountLabel.setForeground(new java.awt.Color(0, 0, 0));
        Item10DiscountLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Item10Panel.add(Item10DiscountLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 70, 60));

        BasePanel.add(Item10Panel, new org.netbeans.lib.awtextra.AbsoluteConstraints(1600, 600, 300, 330));

        TableBg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/shopbilling/Table_bg.jpg"))); // NOI18N
        BasePanel.add(TableBg, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1970, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(BasePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(BasePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
// --------------------------------------------- HOVER OVER THE NAMES OF THE CATEGORIES ON TOP OF THE SCREEN -------------------------------------------------
    private void DailyStaplesMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DailyStaplesMouseEntered
        DailyStaples.setBackground(new java.awt.Color(244, 67, 54));
        DailyStaples.setOpaque(true);
    }//GEN-LAST:event_DailyStaplesMouseEntered

    private void DailyStaplesMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DailyStaplesMouseExited
        DailyStaples.setBackground(new java.awt.Color(244, 68, 54));
        DailyStaples.setOpaque(false);
    }//GEN-LAST:event_DailyStaplesMouseExited

    private void DairyStuffMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DairyStuffMouseEntered
        DairyStuff.setBackground(new java.awt.Color(244, 68, 54));
        DairyStuff.setOpaque(false);
    }//GEN-LAST:event_DairyStuffMouseEntered

    private void DairyStuffMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DairyStuffMouseExited
        DairyStuff.setBackground(new java.awt.Color(244, 67, 54));
        DairyStuff.setOpaque(true);
    }//GEN-LAST:event_DairyStuffMouseExited

    private void PackagedFoodMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PackagedFoodMouseEntered
        PackagedFood.setBackground(new java.awt.Color(244, 67, 54));
        PackagedFood.setOpaque(true);
    }//GEN-LAST:event_PackagedFoodMouseEntered

    private void PackagedFoodMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PackagedFoodMouseExited
        PackagedFood.setBackground(new java.awt.Color(244, 68, 54));
        PackagedFood.setOpaque(false);
    }//GEN-LAST:event_PackagedFoodMouseExited

    private void VegetablesMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_VegetablesMouseEntered
        Vegetables.setBackground(new java.awt.Color(244, 67, 54));
        Vegetables.setOpaque(true);
    }//GEN-LAST:event_VegetablesMouseEntered

    private void VegetablesMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_VegetablesMouseExited
        Vegetables.setBackground(new java.awt.Color(244, 68, 54));
        Vegetables.setOpaque(false);
    }//GEN-LAST:event_VegetablesMouseExited

    private void SnacksMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SnacksMouseEntered
        Snacks.setBackground(new java.awt.Color(244, 67, 54));
        Snacks.setOpaque(true);
    }//GEN-LAST:event_SnacksMouseEntered

    private void SnacksMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SnacksMouseExited
        Snacks.setBackground(new java.awt.Color(244, 68, 54));
        Snacks.setOpaque(false);
    }//GEN-LAST:event_SnacksMouseExited

    private void FruitsMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_FruitsMouseEntered
        Fruits.setBackground(new java.awt.Color(244, 67, 54));
        Fruits.setOpaque(true);
    }//GEN-LAST:event_FruitsMouseEntered

    private void FruitsMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_FruitsMouseExited
        Fruits.setBackground(new java.awt.Color(244, 68, 54));
        Fruits.setOpaque(false);
    }//GEN-LAST:event_FruitsMouseExited

    private void PersonalCareMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PersonalCareMouseEntered
        PersonalCare.setBackground(new java.awt.Color(244, 67, 54));
        PersonalCare.setOpaque(true);
    }//GEN-LAST:event_PersonalCareMouseEntered

    private void PersonalCareMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PersonalCareMouseExited
        PersonalCare.setBackground(new java.awt.Color(244, 68, 54));
        PersonalCare.setOpaque(false);
    }//GEN-LAST:event_PersonalCareMouseExited

    private void BeveragesMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BeveragesMouseEntered
        Beverages.setBackground(new java.awt.Color(244, 67, 54));
        Beverages.setOpaque(true);
    }//GEN-LAST:event_BeveragesMouseEntered

    private void BeveragesMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BeveragesMouseExited
        Beverages.setBackground(new java.awt.Color(244, 68, 54));
        Beverages.setOpaque(false);
    }//GEN-LAST:event_BeveragesMouseExited

    private void CARTMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CARTMouseEntered
        CART.setBackground(new java.awt.Color(244, 67, 54));
        CART.setOpaque(true);
    }//GEN-LAST:event_CARTMouseEntered

    private void CARTMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CARTMouseExited
        CART.setBackground(new java.awt.Color(244, 68, 54));
        CART.setOpaque(false);
    }//GEN-LAST:event_CARTMouseExited

    private void RedCrossMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_RedCrossMouseClicked
        this.setVisible(false);
    }//GEN-LAST:event_RedCrossMouseClicked

//--------------------------------------------------------------------------------------------------------------------------------------------------------------

    
 //------------------------------------------------------------------ ITEM 1 --------------------------------------------------------------------------------------------


// ------------------------------------------------------- ADD TO CART HOVER FOR ITEM1 ----------------------------------------------------------------------
    private void Item1LabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Item1LabelMouseEntered
        Item1Label.setVisible(false);       
        Item1PriceLabel.setBackground(new java.awt.Color(244, 67, 54));
        Item1PriceLabel.setOpaque(true);
        CartItem1Label.setBackground(new java.awt.Color(244, 67, 54));
        CartItem1Label.setOpaque(true);
        CartItem1Label.setVisible(true);
        
    }//GEN-LAST:event_Item1LabelMouseEntered

    private void CartItem1LabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CartItem1LabelMouseEntered
        Item1Label.setVisible(false);       
        Item1PriceLabel.setBackground(new java.awt.Color(244, 67, 54));
        Item1PriceLabel.setOpaque(true);
        CartItem1Label.setBackground(new java.awt.Color(244, 67, 54));
        CartItem1Label.setOpaque(true);
        CartItem1Label.setVisible(true);
    }//GEN-LAST:event_CartItem1LabelMouseEntered

    private void Item1LabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Item1LabelMouseExited
        Item1Label.setVisible(true);
        Item1PriceLabel.setBackground(new java.awt.Color(244, 68, 54));
        Item1PriceLabel.setOpaque(false);  
        CartItem1Label.setBackground(new java.awt.Color(244, 68, 54));
        CartItem1Label.setOpaque(false);
        CartItem1Label.setVisible(false);
    }//GEN-LAST:event_Item1LabelMouseExited

    private void CartItem1LabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CartItem1LabelMouseExited
        Item1Label.setVisible(true);
        Item1PriceLabel.setBackground(new java.awt.Color(244, 68, 54));
        Item1PriceLabel.setOpaque(false);  
        CartItem1Label.setBackground(new java.awt.Color(244, 68, 54));
        CartItem1Label.setOpaque(false);
        CartItem1Label.setVisible(false);
    }//GEN-LAST:event_CartItem1LabelMouseExited
//--------------------------------------------------------------------------------------------------------------------------------------------------------------



// ------------------------------------------------------------- ADDING ITEM1 TO CART ---------------------------------------------------------------
    private void CartItem1LabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CartItem1LabelMouseClicked
                      
        String[] quantity = {"0.5","1","2","3","5","7","10"}; // PREMADE ARRAY OF QUANTITY(kg)
        
        ImageIcon icon1 = new ImageIcon("E:\\SIES Practicals\\JAVA SWING\\SHOP_BILLING_PROJECT\\ShopBilling\\src\\shopbilling\\Option_Pane_Cart.png");
        ImageIcon icon2 = new ImageIcon("E:\\SIES Practicals\\JAVA SWING\\SHOP_BILLING_PROJECT\\ShopBilling\\src\\shopbilling\\Option_Pane_Cart2.png");
        ImageIcon icon3 = new ImageIcon("E:\\SIES Practicals\\JAVA SWING\\SHOP_BILLING_PROJECT\\ShopBilling\\src\\shopbilling\\Happy_smiley.png");
        ImageIcon icon4 = new ImageIcon("E:\\SIES Practicals\\JAVA SWING\\SHOP_BILLING_PROJECT\\ShopBilling\\src\\shopbilling\\Sad_smiley.png");
        
        String item = (String) JOptionPane.showInputDialog(this,"Choose Quantity!(kg)",""+Item1Name+"",JOptionPane.WARNING_MESSAGE,icon1,quantity,quantity[0]); // TAKING QUANTITY FROM USER
        Float items = Float.parseFloat(item);
        
        if(items<=Item1Availability) // CHECKING FOR AVAILABILITY (MINUS AVAILABILITY HOW MUCH THE USER CHOOSES QUANTITY)
        {
            try // JDBC CONNECTION FOR CHANGING AVAILABILITY
                {
                    Class.forName("com.mysql.jdbc.Driver");
                    Connection con = DriverManager.getConnection("jdbc:mysql://localhost/shop_billing","root","");
                    
                    Statement stmt = con.createStatement();
                    
                    String sql = "UPDATE dairy_stuff SET item_availability=item_availability -'"+items+"' WHERE item_name='"+Item1Name+"'"; // UPDATING AVAILABILITY (MINUS)
                    
                    stmt.executeUpdate(sql);
                    
                }
            
            catch(SQLException | ClassNotFoundException e) // EITHER SQL EXCEPTION OR CLASS NOT FOUND EXCEPTION
                {
                    System.out.println("ERROR : "+e);
                }
        
            //------------TOTAL ITEM1 COST WITH DISCOUNT -----------------
            float TotalItem1Cost = items*Item1Cost; // MULTIPLY ITEM1 COST*QUANTITY 
            float DItem1 = TotalItem1Cost*Item1Discount/100; // DISCOUNT
            float TotalDiscountedItem1Cost = TotalItem1Cost - DItem1; // TOTAL DISCOUNTED ITEM1 COST
            
            int Selection = JOptionPane.showOptionDialog(this,""+items+"kg × Rs"+Item1Cost+" = Rs"+TotalItem1Cost+" - Rs"+DItem1+" = Rs"+TotalDiscountedItem1Cost,"ADD TO CART",JOptionPane.YES_NO_OPTION,JOptionPane.INFORMATION_MESSAGE,icon2,null,null);


            if(Selection==0) // 0 means first option(YES)
               {
                   JOptionPane.showMessageDialog(null,""+items+"kg '"+Item1Name+"' Added To Cart!","Yaaay!",JOptionPane.PLAIN_MESSAGE,icon3);

                   try // JDBC CONNECTION FOR INSERTING ITEM1 VALUES IN THE CART
                    {
                        Class.forName("com.mysql.jdbc.Driver");
                        Connection con = DriverManager.getConnection("jdbc:mysql://localhost/shop_billing","root","");

                        String sql1 = "INSERT INTO $tableName(item_name,item_cost,item_quantity,final_cost,item_discount,discounted_final_cost) VALUES(?,?,?,?,?,?)"; // SQL QUERY putting items in database
                        
                        String sql = sql1.replace("$tableName",UserTable);
                        
                        PreparedStatement pstmt = con.prepareStatement(sql);

                        pstmt.setString(1,Item1Name);
                        pstmt.setFloat(2,Item1Cost);
                        pstmt.setFloat(3,items);
                        pstmt.setFloat(4, TotalItem1Cost);
                        pstmt.setFloat(5, DItem1);
                        pstmt.setFloat(6,TotalDiscountedItem1Cost);

                        pstmt.executeUpdate();
                        
                        
                        // FOR DISPLAYING CART NUMBER 
                        String sqlc = "SELECT COUNT(item_name) FROM $tableName"; // WE CANT USE '"+UserTable+"' ......THATS Y WE USE REPLACE
                        String sqlcc = sqlc.replace("$tableName",UserTable);
                        PreparedStatement pstmtc = con.prepareStatement(sqlcc);
                        ResultSet rs = pstmtc.executeQuery();
                        rs.next();  // MOVES POINTER TO THE FIRST POSITION
                        count = rs.getInt(1); // TAKES THE INTEGER VALUE IN FIRST COLUMN WHICH IS THE COUNT VALUE
                        CARTNUMBER.setText(Integer.toString(count));

                    }
                   catch(SQLException | ClassNotFoundException e) // EITHER SQL EXCEPTION OR CLASS NOT FOUND EXCEPTION
                    {
                        System.out.println("ERROR : "+e);
                    }
        }
            
            if(Selection==1 || Selection==-1) //1 means second option(NO).......-1 means third option(X)
            {
                
                try // JDBC CONNECTION FOR CHANGING AVAILABILITY BACK TO NORMAL
                {
                    Class.forName("com.mysql.jdbc.Driver");
                    Connection con = DriverManager.getConnection("jdbc:mysql://localhost/shop_billing","root","");
                    
                    Statement stmt = con.createStatement();
                    
                    String sql = "UPDATE dairy_stuff SET item_availability=item_availability +'"+items+"' WHERE item_name='"+Item1Name+"'"; // UPDATING AVAILABILITY BACK TO NORMAL
                    
                    stmt.executeUpdate(sql);
                    
                }
            
            catch(SQLException | ClassNotFoundException e) // EITHER SQL EXCEPTION OR CLASS NOT FOUND EXCEPTION
                {
                    System.out.println("ERROR : "+e);
                }
                
            }
        }
        else
        {
            JOptionPane.showMessageDialog(null,"This much quantity of '"+Item1Name+"' not available!","Oops!",JOptionPane.PLAIN_MESSAGE,icon4);
        }
    }//GEN-LAST:event_CartItem1LabelMouseClicked
//--------------------------------------------------------------------------------------------------------------------------------------------------------------




// ------ WHEN THE DAILY STAPLES WINDOW IS OPEN CHANGING THE RATE, AVAILABILITY AND DISCOUNT OF ALL ITEMS ACCORDING TO THE ADMIN CHANGES IN DATABASE----------------
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
    
         try {
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost/shop_billing","root","");
            
            Statement stmt = con.createStatement();
            
            String sql = "SELECT * FROM dairy_stuff"; // PUTTING ALL THE VALUES FROM ADMIN DATABASE IN VARIABLES
            
            ResultSet rs = stmt.executeQuery(sql);
            
            //------------------------------------------------------------- ITEM 1 ---------------------------------------------------------------------
            
            rs.next(); // MOVES THE POINTER TO THE FIRST POSITION
            
            Item1Name = rs.getString(2); // TAKING ITEM1 NAME FROM DATABASE
            Item1Label.setText(Item1Name);
            
            Item1Img = rs.getBytes(3);  // TAKING ITEM1 IMAGE FROM DATABASE
            ImageIcon ImageItem1 = new ImageIcon(Item1Img);
            Item1Image.setIcon(ImageItem1);
            
            Item1Cost = rs.getFloat(4); // TAKING ITEM1 COST FROM THE DATABASE
            Item1PriceLabel.setText(Float.toString(Item1Cost)+"/kg"); // CONVERTING TO STRING AND DISPLAYING ITEM1 COST 
            
            Item1Availability = rs.getFloat(5); // TAKING ITEM1 AVAILABILITY FROM DATABASE
            
            Item1Discount = rs.getInt(6); // TAKING ITEM1 DISCOUNT FROM DATABASE
            Item1DiscountLabel.setText(Integer.toString(Item1Discount)+"% off!"); // COVERTING TO STRING AND DISPLAYING ITEM1 DISCOUNT
            
            //------------------------------------------------------------- ITEM 2 ---------------------------------------------------------------------
            
            rs.next(); // MOVES THE POINTER TO THE SECOND POSITION
            
            Item2Name = rs.getString(2); // TAKING ITEM2 NAME FROM DATABASE
            Item2Label.setText(Item2Name);
            
            Item2Img = rs.getBytes(3);  // TAKING ITEM2 IMAGE FROM DATABASE
            ImageIcon ImageItem2 = new ImageIcon(Item2Img);
            Item2Image.setIcon(ImageItem2);
            
            Item2Cost = rs.getFloat(4); // TAKING ITEM2 COST FROM THE DATABASE
            Item2PriceLabel.setText(Float.toString(Item2Cost)+"/kg"); // CONVERTING TO STRING AND DISPLAYING ITEM2 COST 
            
            Item2Availability = rs.getFloat(5); // TAKING ITEM2 AVAILABILITY FROM DATABASE
            
            Item2Discount = rs.getInt(6); // TAKING ITEM2 DISCOUNT FROM DATABASE
            Item2DiscountLabel.setText(Integer.toString(Item2Discount)+"% off!"); // COVERTING TO STRING AND DISPLAYING ITEM2 DISCOUNT
            
            
            //------------------------------------------------------------- ITEM 3 ---------------------------------------------------------------------
            
            rs.next(); // MOVES THE POINTER TO THE THIRD POSITION
            
            Item3Name = rs.getString(2); // TAKING ITEM3 NAME FROM DATABASE
            Item3Label.setText(Item3Name);
            
            Item3Img = rs.getBytes(3);  // TAKING ITEM3 IMAGE FROM DATABASE
            ImageIcon ImageItem3 = new ImageIcon(Item3Img);
            Item3Image.setIcon(ImageItem3);
            
            Item3Cost = rs.getFloat(4); // TAKING ITEM3 COST FROM THE DATABASE
            Item3PriceLabel.setText(Float.toString(Item3Cost)+"/kg"); // CONVERTING TO STRING AND DISPLAYING ITEM3 COST 
            
            Item3Availability = rs.getFloat(5); // TAKING ITEM3 AVAILABILITY FROM DATABASE
            
            Item3Discount = rs.getInt(6); // TAKING ITEM3 DISCOUNT FROM DATABASE
            Item3DiscountLabel.setText(Integer.toString(Item3Discount)+"% off!"); // COVERTING TO STRING AND DISPLAYING ITEM3 DISCOUNT
            
            //------------------------------------------------------------- ITEM 4 ---------------------------------------------------------------------
            
            rs.next(); // MOVES THE POINTER TO THE FOURTH POSITION
            
            Item4Name = rs.getString(2); // TAKING ITEM4 NAME FROM DATABASE
            Item4Label.setText(Item4Name);
            
            Item4Img = rs.getBytes(3);  // TAKING ITEM4 IMAGE FROM DATABASE
            ImageIcon ImageItem4 = new ImageIcon(Item4Img);
            Item4Image.setIcon(ImageItem4);
            
            Item4Cost = rs.getFloat(4); // TAKING ITEM4 COST FROM THE DATABASE
            Item4PriceLabel.setText(Float.toString(Item4Cost)+"/kg"); // CONVERTING TO STRING AND DISPLAYING ITEM4 COST 
            
            Item4Availability = rs.getFloat(5); // TAKING ITEM4 AVAILABILITY FROM DATABASE
            
            Item4Discount = rs.getInt(6); // TAKING ITEM4 DISCOUNT FROM DATABASE
            Item4DiscountLabel.setText(Integer.toString(Item4Discount)+"% off!"); // COVERTING TO STRING AND DISPLAYING ITEM4 DISCOUNT
            
            
            //------------------------------------------------------------- ITEM 5 ---------------------------------------------------------------------
            
            rs.next(); // MOVES THE POINTER TO THE FIFTH POSITION
            
            Item5Name = rs.getString(2); // TAKING ITEM5 NAME FROM DATABASE
            Item5Label.setText(Item5Name);
            
            Item5Img = rs.getBytes(3);  // TAKING ITEM5 IMAGE FROM DATABASE
            ImageIcon ImageItem5 = new ImageIcon(Item5Img);
            Item5Image.setIcon(ImageItem5);
            
            Item5Cost = rs.getFloat(4); // TAKING ITEM5 COST FROM THE DATABASE
            Item5PriceLabel.setText(Float.toString(Item5Cost)+"/kg"); // CONVERTING TO STRING AND DISPLAYING ITEM5 COST 
            
            Item5Availability = rs.getFloat(5); // TAKING ITEM5 AVAILABILITY FROM DATABASE
            
            Item5Discount = rs.getInt(6); // TAKING ITEM5 DISCOUNT FROM DATABASE
            Item5DiscountLabel.setText(Integer.toString(Item5Discount)+"% off!"); // COVERTING TO STRING AND DISPLAYING ITEM5 DISCOUNT
            
            
            //------------------------------------------------------------- ITEM 6 ---------------------------------------------------------------------
            
            rs.next(); // MOVES THE POINTER TO THE SIXTH POSITION
            
            Item6Name = rs.getString(2); // TAKING ITEM6 NAME FROM DATABASE
            Item6Label.setText(Item6Name);
            
            Item6Img = rs.getBytes(3);  // TAKING ITEM6 IMAGE FROM DATABASE
            ImageIcon ImageItem6 = new ImageIcon(Item6Img);
            Item6Image.setIcon(ImageItem6);
            
            Item6Cost = rs.getFloat(4); // TAKING ITEM6 COST FROM THE DATABASE
            Item6PriceLabel.setText(Float.toString(Item6Cost)+"/kg"); // CONVERTING TO STRING AND DISPLAYING ITEM6 COST 
            
            Item6Availability = rs.getFloat(5); // TAKING ITEM6 AVAILABILITY FROM DATABASE
            
            Item6Discount = rs.getInt(6); // TAKING ITEM6 DISCOUNT FROM DATABASE
            Item6DiscountLabel.setText(Integer.toString(Item6Discount)+"% off!"); // COVERTING TO STRING AND DISPLAYING ITEM6 DISCOUNT
            
            
            //------------------------------------------------------------- ITEM 7 ---------------------------------------------------------------------
            
            rs.next(); // MOVES THE POINTER TO THE SEVENTH POSITION
            
            Item7Name = rs.getString(2); // TAKING ITEM7 NAME FROM DATABASE
            Item7Label.setText(Item7Name);
            
            Item7Img = rs.getBytes(3);  // TAKING ITEM7 IMAGE FROM DATABASE
            ImageIcon ImageItem7 = new ImageIcon(Item7Img);
            Item7Image.setIcon(ImageItem7);
            
            Item7Cost = rs.getFloat(4); // TAKING ITEM7 COST FROM THE DATABASE
            Item7PriceLabel.setText(Float.toString(Item7Cost)+"/kg"); // CONVERTING TO STRING AND DISPLAYING ITEM7 COST 
            
            Item7Availability = rs.getFloat(5); // TAKING ITEM7 AVAILABILITY FROM DATABASE
            
            Item7Discount = rs.getInt(6); // TAKING ITEM7 DISCOUNT FROM DATABASE
            Item7DiscountLabel.setText(Integer.toString(Item7Discount)+"% off!"); // COVERTING TO STRING AND DISPLAYING ITEM7 DISCOUNT
            
            
            //------------------------------------------------------------- ITEM 8 ---------------------------------------------------------------------
            
            rs.next(); // MOVES THE POINTER TO THE EIGHT POSITION
            
            Item8Name = rs.getString(2); // TAKING ITEM8 NAME FROM DATABASE
            Item8Label.setText(Item8Name);
            
            Item8Img = rs.getBytes(3);  // TAKING ITEM8 IMAGE FROM DATABASE
            ImageIcon ImageItem8 = new ImageIcon(Item8Img);
            Item8Image.setIcon(ImageItem8);
            
            Item8Cost = rs.getFloat(4); // TAKING ITEM8 COST FROM THE DATABASE
            Item8PriceLabel.setText(Float.toString(Item8Cost)+"/kg"); // CONVERTING TO STRING AND DISPLAYING ITEM8 COST 
            
            Item8Availability = rs.getFloat(5); // TAKING ITEM8 AVAILABILITY FROM DATABASE
            
            Item8Discount = rs.getInt(6); // TAKING ITEM8 DISCOUNT FROM DATABASE
            Item8DiscountLabel.setText(Integer.toString(Item8Discount)+"% off!"); // COVERTING TO STRING AND DISPLAYING ITEM8 DISCOUNT
            
            
            //------------------------------------------------------------- ITEM 9 ---------------------------------------------------------------------
            
            rs.next(); // MOVES THE POINTER TO THE NINTH POSITION
            
            Item9Name = rs.getString(2); // TAKING ITEM9 NAME FROM DATABASE
            Item9Label.setText(Item9Name);
            
            Item9Img = rs.getBytes(3);  // TAKING ITEM9 IMAGE FROM DATABASE
            ImageIcon ImageItem9 = new ImageIcon(Item9Img);
            Item9Image.setIcon(ImageItem9);
            
            Item9Cost = rs.getFloat(4); // TAKING ITEM9 COST FROM THE DATABASE
            Item9PriceLabel.setText(Float.toString(Item9Cost)+"/kg"); // CONVERTING TO STRING AND DISPLAYING ITEM9 COST 
            
            Item9Availability = rs.getFloat(5); // TAKING ITEM9 AVAILABILITY FROM DATABASE
            
            Item9Discount = rs.getInt(6); // TAKING ITEM9 DISCOUNT FROM DATABASE
            Item9DiscountLabel.setText(Integer.toString(Item9Discount)+"% off!"); // COVERTING TO STRING AND DISPLAYING ITEM9 DISCOUNT
            
            
            //------------------------------------------------------------- ITEM 10 ---------------------------------------------------------------------
            
            rs.next(); // MOVES THE POINTER TO THE TENTH POSITION
            
            Item10Name = rs.getString(2); // TAKING ITEM10 NAME FROM DATABASE
            Item10Label.setText(Item10Name);
            
            Item10Img = rs.getBytes(3);  // TAKING ITEM10 IMAGE FROM DATABASE
            ImageIcon ImageItem10 = new ImageIcon(Item10Img);
            Item10Image.setIcon(ImageItem10);
            
            Item10Cost = rs.getFloat(4); // TAKING ITEM10 COST FROM THE DATABASE
            Item10PriceLabel.setText(Float.toString(Item10Cost)+"/kg"); // CONVERTING TO STRING AND DISPLAYING ITEM10 COST 
            
            Item10Availability = rs.getFloat(5); // TAKING ITEM10 AVAILABILITY FROM DATABASE
            
            Item10Discount = rs.getInt(6); // TAKING ITEM10 DISCOUNT FROM DATABASE
            Item10DiscountLabel.setText(Integer.toString(Item10Discount)+"% off!"); // COVERTING TO STRING AND DISPLAYING ITEM10 DISCOUNT
            
            
            // FOR DISPLAYING CART NUMBER 
            String sqlc = "SELECT COUNT(item_name) FROM $tableName"; // WE CANT USE '"+UserTable+"' ......THATS Y WE USE REPLACE
            String sqlcc = sqlc.replace("$tableName",UserTable);
            PreparedStatement pstmtc = con.prepareStatement(sqlcc);
            ResultSet rs1 = pstmtc.executeQuery();
            rs1.next(); // MOVES POINTER TO THE FIRST POSITION
            count = rs1.getInt(1);  // TAKES THE INTEGER VALUE IN FIRST COLUMN WHICH IS THE COUNT VALUE
            CARTNUMBER.setText(Integer.toString(count));
            
            
            
            
        } 
        catch(SQLException | ClassNotFoundException e) // EITHER SQL EXCEPTION OR CLASS NOT FOUND EXCEPTION
                {
                    System.out.println("ERROR : "+e);
                }
        
    }//GEN-LAST:event_formWindowOpened
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
    
    
//--------------------------------------------------------------------- ITEM 2 -----------------------------------------------------------------------------------------
          
    
// ------------------------------------------------------------- ADDING ITEM2 TO CART ---------------------------------------------------------------
    private void CartItem2LabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CartItem2LabelMouseClicked
        
        String[] quantity = {"0.5","1","2","3","5","7","10"}; // PREMADE ARRAY OF QUANTITY(kg)
        
        ImageIcon icon1 = new ImageIcon("E:\\SIES Practicals\\JAVA SWING\\SHOP_BILLING_PROJECT\\ShopBilling\\src\\shopbilling\\Option_Pane_Cart.png");
        ImageIcon icon2 = new ImageIcon("E:\\SIES Practicals\\JAVA SWING\\SHOP_BILLING_PROJECT\\ShopBilling\\src\\shopbilling\\Option_Pane_Cart2.png");
        ImageIcon icon3 = new ImageIcon("E:\\SIES Practicals\\JAVA SWING\\SHOP_BILLING_PROJECT\\ShopBilling\\src\\shopbilling\\Happy_smiley.png");
        ImageIcon icon4 = new ImageIcon("E:\\SIES Practicals\\JAVA SWING\\SHOP_BILLING_PROJECT\\ShopBilling\\src\\shopbilling\\Sad_smiley.png");
        
        String item = (String) JOptionPane.showInputDialog(this,"Choose Quantity!(kg)",""+Item2Name+"",JOptionPane.WARNING_MESSAGE,icon1,quantity,quantity[0]); // TAKING QUANTITY FROM USER
        Float items = Float.parseFloat(item);
        
        if(items<=Item2Availability) // CHECKING FOR AVAILABILITY (MINUS AVAILABILITY HOW MUCH THE USER CHOOSES QUANTITY)
        {
            try // JDBC CONNECTION FOR CHANGING AVAILABILITY
                {
                    Class.forName("com.mysql.jdbc.Driver");
                    Connection con = DriverManager.getConnection("jdbc:mysql://localhost/shop_billing","root","");
                    
                    Statement stmt = con.createStatement();
                    
                    String sql = "UPDATE dairy_stuff SET item_availability=item_availability -'"+items+"' WHERE item_name='"+Item2Name+"'"; // UPDATING AVAILABILITY (MINUS)
                    
                    stmt.executeUpdate(sql);
                    
                }
            
            catch(SQLException | ClassNotFoundException e) // EITHER SQL EXCEPTION OR CLASS NOT FOUND EXCEPTION
                {
                    System.out.println("ERROR : "+e);
                }
        
            //------------TOTAL ITEM2 COST WITH DISCOUNT -----------------
            float TotalItem2Cost = items*Item2Cost; // MULTIPLY ITEM2 COST*QUANTITY 
            float DItem2 = TotalItem2Cost*Item2Discount/100; // DISCOUNT
            float TotalDiscountedItem2Cost = TotalItem2Cost - DItem2; // TOTAL DISCOUNTED ITEM2 COST
            
            int Selection = JOptionPane.showOptionDialog(this,""+items+"kg × Rs"+Item2Cost+" = Rs"+TotalItem2Cost+" - Rs"+DItem2+" = Rs"+TotalDiscountedItem2Cost,"ADD TO CART",JOptionPane.YES_NO_OPTION,JOptionPane.INFORMATION_MESSAGE,icon2,null,null);


            if(Selection==0) // 0 means first option(YES)
               {
                   JOptionPane.showMessageDialog(null,""+items+"kg '"+Item2Name+"' Added To Cart!","Yaaay!",JOptionPane.PLAIN_MESSAGE,icon3);

                   try // JDBC CONNECTION FOR INSERTING ITEM2 VALUES IN THE CART
                    {
                        Class.forName("com.mysql.jdbc.Driver");
                        Connection con = DriverManager.getConnection("jdbc:mysql://localhost/shop_billing","root","");

                        String sql1 = "INSERT INTO $tableName(item_name,item_cost,item_quantity,final_cost,item_discount,discounted_final_cost) VALUES(?,?,?,?,?,?)"; // SQL QUERY putting items in database
                        
                        String sql = sql1.replace("$tableName",UserTable);
                        
                        PreparedStatement pstmt = con.prepareStatement(sql);

                        pstmt.setString(1,Item2Name);
                        pstmt.setFloat(2,Item2Cost);
                        pstmt.setFloat(3,items);
                        pstmt.setFloat(4, TotalItem2Cost);
                        pstmt.setFloat(5, DItem2);
                        pstmt.setFloat(6,TotalDiscountedItem2Cost);

                        pstmt.executeUpdate();
                        
                        
                        // FOR DISPLAYING CART NUMBER 
                        String sqlc = "SELECT COUNT(item_name) FROM $tableName"; // WE CANT USE '"+UserTable+"' ......THATS Y WE USE REPLACE
                        String sqlcc = sqlc.replace("$tableName",UserTable);
                        PreparedStatement pstmtc = con.prepareStatement(sqlcc);
                        ResultSet rs = pstmtc.executeQuery();
                        rs.next();  // MOVES POINTER TO THE FIRST POSITION
                        count = rs.getInt(1); // TAKES THE INTEGER VALUE IN FIRST COLUMN WHICH IS THE COUNT VALUE
                        CARTNUMBER.setText(Integer.toString(count));

                    }
                   catch(SQLException | ClassNotFoundException e) // EITHER SQL EXCEPTION OR CLASS NOT FOUND EXCEPTION
                    {
                        System.out.println("ERROR : "+e);
                    }
        }
            
            if(Selection==1 || Selection==-1) //1 means second option(NO).......-1 means third option(X)
            {
                
                try // JDBC CONNECTION FOR CHANGING AVAILABILITY BACK TO NORMAL
                {
                    Class.forName("com.mysql.jdbc.Driver");
                    Connection con = DriverManager.getConnection("jdbc:mysql://localhost/shop_billing","root","");
                    
                    Statement stmt = con.createStatement();
                    
                    String sql = "UPDATE dairy_stuff SET item_availability=item_availability +'"+items+"' WHERE item_name='"+Item2Name+"'"; // UPDATING AVAILABILITY BACK TO NORMAL
                    
                    stmt.executeUpdate(sql);
                    
                }
            
            catch(SQLException | ClassNotFoundException e) // EITHER SQL EXCEPTION OR CLASS NOT FOUND EXCEPTION
                {
                    System.out.println("ERROR : "+e);
                }
                
            }
        }
        else
        {
            JOptionPane.showMessageDialog(null,"This much quantity of '"+Item2Name+"' not available!","Oops!",JOptionPane.PLAIN_MESSAGE,icon4);
        }
        
        
    }//GEN-LAST:event_CartItem2LabelMouseClicked
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
    
    
// ------------------------------------------------------- ADD TO CART HOVER FOR ITEM2 ----------------------------------------------------------------------
    private void CartItem2LabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CartItem2LabelMouseEntered
        Item2Label.setVisible(false);       
        Item2PriceLabel.setBackground(new java.awt.Color(244, 67, 54));
        Item2PriceLabel.setOpaque(true);
        CartItem2Label.setBackground(new java.awt.Color(244, 67, 54));
        CartItem2Label.setOpaque(true);
        CartItem2Label.setVisible(true);
    }//GEN-LAST:event_CartItem2LabelMouseEntered

    private void CartItem2LabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CartItem2LabelMouseExited
        Item2Label.setVisible(true);
        Item2PriceLabel.setBackground(new java.awt.Color(244, 68, 54));
        Item2PriceLabel.setOpaque(false);  
        CartItem2Label.setBackground(new java.awt.Color(244, 68, 54));
        CartItem2Label.setOpaque(false);
        CartItem2Label.setVisible(false);
    }//GEN-LAST:event_CartItem2LabelMouseExited

    private void Item2LabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Item2LabelMouseEntered
        Item2Label.setVisible(false);       
        Item2PriceLabel.setBackground(new java.awt.Color(244, 67, 54));
        Item2PriceLabel.setOpaque(true);
        CartItem2Label.setBackground(new java.awt.Color(244, 67, 54));
        CartItem2Label.setOpaque(true);
        CartItem2Label.setVisible(true);
    }//GEN-LAST:event_Item2LabelMouseEntered

    private void Item2LabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Item2LabelMouseExited
        Item2Label.setVisible(true);
        Item2PriceLabel.setBackground(new java.awt.Color(244, 68, 54));
        Item2PriceLabel.setOpaque(false);  
        CartItem2Label.setBackground(new java.awt.Color(244, 68, 54));
        CartItem2Label.setOpaque(false);
        CartItem2Label.setVisible(false);
    }//GEN-LAST:event_Item2LabelMouseExited
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
    
  
//--------------------------------------------------------------------- ITEM 3 -----------------------------------------------------------------------------------------
          
    
// ------------------------------------------------------------- ADDING ITEM3 TO CART --------------------------------------------------------------- 
    private void CartItem3LabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CartItem3LabelMouseClicked
        
        String[] quantity = {"0.5","1","2","3","5","7","10"}; // PREMADE ARRAY OF QUANTITY(kg)
        
        ImageIcon icon1 = new ImageIcon("E:\\SIES Practicals\\JAVA SWING\\SHOP_BILLING_PROJECT\\ShopBilling\\src\\shopbilling\\Option_Pane_Cart.png");
        ImageIcon icon2 = new ImageIcon("E:\\SIES Practicals\\JAVA SWING\\SHOP_BILLING_PROJECT\\ShopBilling\\src\\shopbilling\\Option_Pane_Cart2.png");
        ImageIcon icon3 = new ImageIcon("E:\\SIES Practicals\\JAVA SWING\\SHOP_BILLING_PROJECT\\ShopBilling\\src\\shopbilling\\Happy_smiley.png");
        ImageIcon icon4 = new ImageIcon("E:\\SIES Practicals\\JAVA SWING\\SHOP_BILLING_PROJECT\\ShopBilling\\src\\shopbilling\\Sad_smiley.png");
        
        String item = (String) JOptionPane.showInputDialog(this,"Choose Quantity!(kg)",""+Item3Name+"",JOptionPane.WARNING_MESSAGE,icon1,quantity,quantity[0]); // TAKING QUANTITY FROM USER
        Float items = Float.parseFloat(item);
        
        if(items<=Item3Availability) // CHECKING FOR AVAILABILITY (MINUS AVAILABILITY HOW MUCH THE USER CHOOSES QUANTITY)
        {
            try // JDBC CONNECTION FOR CHANGING AVAILABILITY
                {
                    Class.forName("com.mysql.jdbc.Driver");
                    Connection con = DriverManager.getConnection("jdbc:mysql://localhost/shop_billing","root","");
                    
                    Statement stmt = con.createStatement();
                    
                    String sql = "UPDATE dairy_stuff SET item_availability=item_availability -'"+items+"' WHERE item_name='"+Item3Name+"'"; // UPDATING AVAILABILITY (MINUS)
                    
                    stmt.executeUpdate(sql);
                    
                }
            
            catch(SQLException | ClassNotFoundException e) // EITHER SQL EXCEPTION OR CLASS NOT FOUND EXCEPTION
                {
                    System.out.println("ERROR : "+e);
                }
        
            //------------TOTAL ITEM3 COST WITH DISCOUNT -----------------
            float TotalItem3Cost = items*Item3Cost; // MULTIPLY ITEM3 COST*QUANTITY 
            float DItem3 = TotalItem3Cost*Item3Discount/100; // DISCOUNT
            float TotalDiscountedItem3Cost = TotalItem3Cost - DItem3; // TOTAL DISCOUNTED ITEM3 COST
            
            int Selection = JOptionPane.showOptionDialog(this,""+items+"kg × Rs"+Item3Cost+" = Rs"+TotalItem3Cost+" - Rs"+DItem3+" = Rs"+TotalDiscountedItem3Cost,"ADD TO CART",JOptionPane.YES_NO_OPTION,JOptionPane.INFORMATION_MESSAGE,icon2,null,null);


            if(Selection==0) // 0 means first option(YES)
               {
                   JOptionPane.showMessageDialog(null,""+items+"kg '"+Item3Name+"' Added To Cart!","Yaaay!",JOptionPane.PLAIN_MESSAGE,icon3);

                   try // JDBC CONNECTION FOR INSERTING ITEM3 VALUES IN THE CART
                    {
                        Class.forName("com.mysql.jdbc.Driver");
                        Connection con = DriverManager.getConnection("jdbc:mysql://localhost/shop_billing","root","");

                        String sql1 = "INSERT INTO $tableName(item_name,item_cost,item_quantity,final_cost,item_discount,discounted_final_cost) VALUES(?,?,?,?,?,?)"; // SQL QUERY putting items in database
                        
                        String sql = sql1.replace("$tableName",UserTable);
                        
                        PreparedStatement pstmt = con.prepareStatement(sql);

                        pstmt.setString(1,Item3Name);
                        pstmt.setFloat(2,Item3Cost);
                        pstmt.setFloat(3,items);
                        pstmt.setFloat(4, TotalItem3Cost);
                        pstmt.setFloat(5, DItem3);
                        pstmt.setFloat(6,TotalDiscountedItem3Cost);

                        pstmt.executeUpdate();
                        
                        
                        // FOR DISPLAYING CART NUMBER 
                        String sqlc = "SELECT COUNT(item_name) FROM $tableName"; // WE CANT USE '"+UserTable+"' ......THATS Y WE USE REPLACE
                        String sqlcc = sqlc.replace("$tableName",UserTable);
                        PreparedStatement pstmtc = con.prepareStatement(sqlcc);
                        ResultSet rs = pstmtc.executeQuery();
                        rs.next();  // MOVES POINTER TO THE FIRST POSITION
                        count = rs.getInt(1); // TAKES THE INTEGER VALUE IN FIRST COLUMN WHICH IS THE COUNT VALUE
                        CARTNUMBER.setText(Integer.toString(count));

                    }
                   catch(SQLException | ClassNotFoundException e) // EITHER SQL EXCEPTION OR CLASS NOT FOUND EXCEPTION
                    {
                        System.out.println("ERROR : "+e);
                    }
        }
            
            if(Selection==1 || Selection==-1) //1 means second option(NO).......-1 means third option(X)
            {
                
                try // JDBC CONNECTION FOR CHANGING AVAILABILITY BACK TO NORMAL
                {
                    Class.forName("com.mysql.jdbc.Driver");
                    Connection con = DriverManager.getConnection("jdbc:mysql://localhost/shop_billing","root","");
                    
                    Statement stmt = con.createStatement();
                    
                    String sql = "UPDATE dairy_stuff SET item_availability=item_availability +'"+items+"' WHERE item_name='"+Item3Name+"'"; // UPDATING AVAILABILITY BACK TO NORMAL
                    
                    stmt.executeUpdate(sql);
                    
                }
            
            catch(SQLException | ClassNotFoundException e) // EITHER SQL EXCEPTION OR CLASS NOT FOUND EXCEPTION
                {
                    System.out.println("ERROR : "+e);
                }
                
            }
        }
        else
        {
            JOptionPane.showMessageDialog(null,"This much quantity of '"+Item3Name+"' not available!","Oops!",JOptionPane.PLAIN_MESSAGE,icon4);
        }
    }//GEN-LAST:event_CartItem3LabelMouseClicked
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
    
    
// ------------------------------------------------------- ADD TO CART HOVER FOR ITEM3 ----------------------------------------------------------------------
    private void CartItem3LabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CartItem3LabelMouseEntered
        Item3Label.setVisible(false);       
        Item3PriceLabel.setBackground(new java.awt.Color(244, 67, 54));
        Item3PriceLabel.setOpaque(true);
        CartItem3Label.setBackground(new java.awt.Color(244, 67, 54));
        CartItem3Label.setOpaque(true);
        CartItem3Label.setVisible(true);
    }//GEN-LAST:event_CartItem3LabelMouseEntered

    private void CartItem3LabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CartItem3LabelMouseExited
        Item3Label.setVisible(true);
        Item3PriceLabel.setBackground(new java.awt.Color(244, 68, 54));
        Item3PriceLabel.setOpaque(false);  
        CartItem3Label.setBackground(new java.awt.Color(244, 68, 54));
        CartItem3Label.setOpaque(false);
        CartItem3Label.setVisible(false);
    }//GEN-LAST:event_CartItem3LabelMouseExited

    private void Item3LabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Item3LabelMouseEntered
        Item3Label.setVisible(false);       
        Item3PriceLabel.setBackground(new java.awt.Color(244, 67, 54));
        Item3PriceLabel.setOpaque(true);
        CartItem3Label.setBackground(new java.awt.Color(244, 67, 54));
        CartItem3Label.setOpaque(true);
        CartItem3Label.setVisible(true);
    }//GEN-LAST:event_Item3LabelMouseEntered

    private void Item3LabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Item3LabelMouseExited
        Item3Label.setVisible(true);
        Item3PriceLabel.setBackground(new java.awt.Color(244, 68, 54));
        Item3PriceLabel.setOpaque(false);  
        CartItem3Label.setBackground(new java.awt.Color(244, 68, 54));
        CartItem3Label.setOpaque(false);
        CartItem3Label.setVisible(false);
    }//GEN-LAST:event_Item3LabelMouseExited
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
    
 
//--------------------------------------------------------------------- ITEM 4 -----------------------------------------------------------------------------------------
          
    
// ------------------------------------------------------------- ADDING ITEM4 TO CART --------------------------------------------------------------- 
    private void CartItem4LabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CartItem4LabelMouseClicked
        
        String[] quantity = {"0.5","1","2","3","5","7","10"}; // PREMADE ARRAY OF QUANTITY(kg)
        
        ImageIcon icon1 = new ImageIcon("E:\\SIES Practicals\\JAVA SWING\\SHOP_BILLING_PROJECT\\ShopBilling\\src\\shopbilling\\Option_Pane_Cart.png");
        ImageIcon icon2 = new ImageIcon("E:\\SIES Practicals\\JAVA SWING\\SHOP_BILLING_PROJECT\\ShopBilling\\src\\shopbilling\\Option_Pane_Cart2.png");
        ImageIcon icon3 = new ImageIcon("E:\\SIES Practicals\\JAVA SWING\\SHOP_BILLING_PROJECT\\ShopBilling\\src\\shopbilling\\Happy_smiley.png");
        ImageIcon icon4 = new ImageIcon("E:\\SIES Practicals\\JAVA SWING\\SHOP_BILLING_PROJECT\\ShopBilling\\src\\shopbilling\\Sad_smiley.png");
        
        String item = (String) JOptionPane.showInputDialog(this,"Choose Quantity!(kg)",""+Item4Name+"",JOptionPane.WARNING_MESSAGE,icon1,quantity,quantity[0]); // TAKING QUANTITY FROM USER
        Float items = Float.parseFloat(item);
        
        if(items<=Item4Availability) // CHECKING FOR AVAILABILITY (MINUS AVAILABILITY HOW MUCH THE USER CHOOSES QUANTITY)
        {
            try // JDBC CONNECTION FOR CHANGING AVAILABILITY
                {
                    Class.forName("com.mysql.jdbc.Driver");
                    Connection con = DriverManager.getConnection("jdbc:mysql://localhost/shop_billing","root","");
                    
                    Statement stmt = con.createStatement();
                    
                    String sql = "UPDATE dairy_stuff SET item_availability=item_availability -'"+items+"' WHERE item_name='"+Item4Name+"'"; // UPDATING AVAILABILITY (MINUS)
                    
                    stmt.executeUpdate(sql);
                    
                }
            
            catch(SQLException | ClassNotFoundException e) // EITHER SQL EXCEPTION OR CLASS NOT FOUND EXCEPTION
                {
                    System.out.println("ERROR : "+e);
                }
        
            //------------TOTAL ITEM4 COST WITH DISCOUNT -----------------
            float TotalItem4Cost = items*Item4Cost; // MULTIPLY ITEM4 COST*QUANTITY 
            float DItem4 = TotalItem4Cost*Item4Discount/100; // DISCOUNT
            float TotalDiscountedItem4Cost = TotalItem4Cost - DItem4; // TOTAL DISCOUNTED ITEM4 COST
            
            int Selection = JOptionPane.showOptionDialog(this,""+items+"kg × Rs"+Item4Cost+" = Rs"+TotalItem4Cost+" - Rs"+DItem4+" = Rs"+TotalDiscountedItem4Cost,"ADD TO CART",JOptionPane.YES_NO_OPTION,JOptionPane.INFORMATION_MESSAGE,icon2,null,null);


            if(Selection==0) // 0 means first option(YES)
               {
                   JOptionPane.showMessageDialog(null,""+items+"kg '"+Item4Name+"' Added To Cart!","Yaaay!",JOptionPane.PLAIN_MESSAGE,icon3);

                   try // JDBC CONNECTION FOR INSERTING ITEM4 VALUES IN THE CART
                    {
                        Class.forName("com.mysql.jdbc.Driver");
                        Connection con = DriverManager.getConnection("jdbc:mysql://localhost/shop_billing","root","");

                        String sql1 = "INSERT INTO $tableName(item_name,item_cost,item_quantity,final_cost,item_discount,discounted_final_cost) VALUES(?,?,?,?,?,?)"; // SQL QUERY putting items in database
                        
                        String sql = sql1.replace("$tableName",UserTable);
                        
                        PreparedStatement pstmt = con.prepareStatement(sql);

                        pstmt.setString(1,Item4Name);
                        pstmt.setFloat(2,Item4Cost);
                        pstmt.setFloat(3,items);
                        pstmt.setFloat(4, TotalItem4Cost);
                        pstmt.setFloat(5, DItem4);
                        pstmt.setFloat(6,TotalDiscountedItem4Cost);

                        pstmt.executeUpdate();
                        
                        
                        // FOR DISPLAYING CART NUMBER 
                        String sqlc = "SELECT COUNT(item_name) FROM $tableName"; // WE CANT USE '"+UserTable+"' ......THATS Y WE USE REPLACE
                        String sqlcc = sqlc.replace("$tableName",UserTable);
                        PreparedStatement pstmtc = con.prepareStatement(sqlcc);
                        ResultSet rs = pstmtc.executeQuery();
                        rs.next();  // MOVES POINTER TO THE FIRST POSITION
                        count = rs.getInt(1); // TAKES THE INTEGER VALUE IN FIRST COLUMN WHICH IS THE COUNT VALUE
                        CARTNUMBER.setText(Integer.toString(count));

                    }
                   catch(SQLException | ClassNotFoundException e) // EITHER SQL EXCEPTION OR CLASS NOT FOUND EXCEPTION
                    {
                        System.out.println("ERROR : "+e);
                    }
        }
            
            if(Selection==1 || Selection==-1) //1 means second option(NO).......-1 means third option(X)
            {
                
                try // JDBC CONNECTION FOR CHANGING AVAILABILITY BACK TO NORMAL
                {
                    Class.forName("com.mysql.jdbc.Driver");
                    Connection con = DriverManager.getConnection("jdbc:mysql://localhost/shop_billing","root","");
                    
                    Statement stmt = con.createStatement();
                    
                    String sql = "UPDATE dairy_stuff SET item_availability=item_availability +'"+items+"' WHERE item_name='"+Item4Name+"'"; // UPDATING AVAILABILITY BACK TO NORMAL
                    
                    stmt.executeUpdate(sql);
                    
                }
            
            catch(SQLException | ClassNotFoundException e) // EITHER SQL EXCEPTION OR CLASS NOT FOUND EXCEPTION
                {
                    System.out.println("ERROR : "+e);
                }
                
            }
        }
        else
        {
            JOptionPane.showMessageDialog(null,"This much quantity of '"+Item4Name+"' not available!","Oops!",JOptionPane.PLAIN_MESSAGE,icon4);
        }
    }//GEN-LAST:event_CartItem4LabelMouseClicked
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
    
    
// ------------------------------------------------------- ADD TO CART HOVER FOR ITEM4 ----------------------------------------------------------------------  
    private void CartItem4LabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CartItem4LabelMouseEntered
        Item4Label.setVisible(false);       
        Item4PriceLabel.setBackground(new java.awt.Color(244, 67, 54));
        Item4PriceLabel.setOpaque(true);
        CartItem4Label.setBackground(new java.awt.Color(244, 67, 54));
        CartItem4Label.setOpaque(true);
        CartItem4Label.setVisible(true);
    }//GEN-LAST:event_CartItem4LabelMouseEntered

    private void CartItem4LabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CartItem4LabelMouseExited
        Item4Label.setVisible(true);
        Item4PriceLabel.setBackground(new java.awt.Color(244, 68, 54));
        Item4PriceLabel.setOpaque(false);  
        CartItem4Label.setBackground(new java.awt.Color(244, 68, 54));
        CartItem4Label.setOpaque(false);
        CartItem4Label.setVisible(false);
    }//GEN-LAST:event_CartItem4LabelMouseExited

    private void Item4LabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Item4LabelMouseEntered
        Item4Label.setVisible(false);       
        Item4PriceLabel.setBackground(new java.awt.Color(244, 67, 54));
        Item4PriceLabel.setOpaque(true);
        CartItem4Label.setBackground(new java.awt.Color(244, 67, 54));
        CartItem4Label.setOpaque(true);
        CartItem4Label.setVisible(true);
    }//GEN-LAST:event_Item4LabelMouseEntered

    private void Item4LabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Item4LabelMouseExited
        Item4Label.setVisible(true);
        Item4PriceLabel.setBackground(new java.awt.Color(244, 68, 54));
        Item4PriceLabel.setOpaque(false);  
        CartItem4Label.setBackground(new java.awt.Color(244, 68, 54));
        CartItem4Label.setOpaque(false);
        CartItem4Label.setVisible(false);
    }//GEN-LAST:event_Item4LabelMouseExited
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
    
 
//--------------------------------------------------------------------- ITEM 5 -----------------------------------------------------------------------------------------
          
    
// ------------------------------------------------------------- ADDING ITEM5 TO CART ---------------------------------------------------------------    
    private void CartItem5LabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CartItem5LabelMouseClicked
        
        String[] quantity = {"0.5","1","2","3","5","7","10"}; // PREMADE ARRAY OF QUANTITY(kg)
        
        ImageIcon icon1 = new ImageIcon("E:\\SIES Practicals\\JAVA SWING\\SHOP_BILLING_PROJECT\\ShopBilling\\src\\shopbilling\\Option_Pane_Cart.png");
        ImageIcon icon2 = new ImageIcon("E:\\SIES Practicals\\JAVA SWING\\SHOP_BILLING_PROJECT\\ShopBilling\\src\\shopbilling\\Option_Pane_Cart2.png");
        ImageIcon icon3 = new ImageIcon("E:\\SIES Practicals\\JAVA SWING\\SHOP_BILLING_PROJECT\\ShopBilling\\src\\shopbilling\\Happy_smiley.png");
        ImageIcon icon4 = new ImageIcon("E:\\SIES Practicals\\JAVA SWING\\SHOP_BILLING_PROJECT\\ShopBilling\\src\\shopbilling\\Sad_smiley.png");
        
        String item = (String) JOptionPane.showInputDialog(this,"Choose Quantity!(kg)",""+Item5Name+"",JOptionPane.WARNING_MESSAGE,icon1,quantity,quantity[0]); // TAKING QUANTITY FROM USER
        Float items = Float.parseFloat(item);
        
        if(items<=Item5Availability) // CHECKING FOR AVAILABILITY (MINUS AVAILABILITY HOW MUCH THE USER CHOOSES QUANTITY)
        {
            try // JDBC CONNECTION FOR CHANGING AVAILABILITY
                {
                    Class.forName("com.mysql.jdbc.Driver");
                    Connection con = DriverManager.getConnection("jdbc:mysql://localhost/shop_billing","root","");
                    
                    Statement stmt = con.createStatement();
                    
                    String sql = "UPDATE dairy_stuff SET item_availability=item_availability -'"+items+"' WHERE item_name='"+Item5Name+"'"; // UPDATING AVAILABILITY (MINUS)
                    
                    stmt.executeUpdate(sql);
                    
                }
            
            catch(SQLException | ClassNotFoundException e) // EITHER SQL EXCEPTION OR CLASS NOT FOUND EXCEPTION
                {
                    System.out.println("ERROR : "+e);
                }
        
            //------------TOTAL ITEM5 COST WITH DISCOUNT -----------------
            float TotalItem5Cost = items*Item5Cost; // MULTIPLY ITEM5 COST*QUANTITY 
            float DItem5 = TotalItem5Cost*Item5Discount/100; // DISCOUNT
            float TotalDiscountedItem5Cost = TotalItem5Cost - DItem5; // TOTAL DISCOUNTED ITEM5 COST
            
            int Selection = JOptionPane.showOptionDialog(this,""+items+"kg × Rs"+Item5Cost+" = Rs"+TotalItem5Cost+" - Rs"+DItem5+" = Rs"+TotalDiscountedItem5Cost,"ADD TO CART",JOptionPane.YES_NO_OPTION,JOptionPane.INFORMATION_MESSAGE,icon2,null,null);


            if(Selection==0) // 0 means first option(YES)
               {
                   JOptionPane.showMessageDialog(null,""+items+"kg '"+Item5Name+"' Added To Cart!","Yaaay!",JOptionPane.PLAIN_MESSAGE,icon3);

                   try // JDBC CONNECTION FOR INSERTING ITEM5 VALUES IN THE CART
                    {
                        Class.forName("com.mysql.jdbc.Driver");
                        Connection con = DriverManager.getConnection("jdbc:mysql://localhost/shop_billing","root","");

                        String sql1 = "INSERT INTO $tableName(item_name,item_cost,item_quantity,final_cost,item_discount,discounted_final_cost) VALUES(?,?,?,?,?,?)"; // SQL QUERY putting items in database
                        
                        String sql = sql1.replace("$tableName",UserTable);
                        
                        PreparedStatement pstmt = con.prepareStatement(sql);

                        pstmt.setString(1,Item5Name);
                        pstmt.setFloat(2,Item5Cost);
                        pstmt.setFloat(3,items);
                        pstmt.setFloat(4, TotalItem5Cost);
                        pstmt.setFloat(5, DItem5);
                        pstmt.setFloat(6,TotalDiscountedItem5Cost);

                        pstmt.executeUpdate();
                        
                        
                        // FOR DISPLAYING CART NUMBER 
                        String sqlc = "SELECT COUNT(item_name) FROM $tableName"; // WE CANT USE '"+UserTable+"' ......THATS Y WE USE REPLACE
                        String sqlcc = sqlc.replace("$tableName",UserTable);
                        PreparedStatement pstmtc = con.prepareStatement(sqlcc);
                        ResultSet rs = pstmtc.executeQuery();
                        rs.next();  // MOVES POINTER TO THE FIRST POSITION
                        count = rs.getInt(1); // TAKES THE INTEGER VALUE IN FIRST COLUMN WHICH IS THE COUNT VALUE
                        CARTNUMBER.setText(Integer.toString(count));

                    }
                   catch(SQLException | ClassNotFoundException e) // EITHER SQL EXCEPTION OR CLASS NOT FOUND EXCEPTION
                    {
                        System.out.println("ERROR : "+e);
                    }
        }
            
            if(Selection==1 || Selection==-1) //1 means second option(NO).......-1 means third option(X)
            {
                
                try // JDBC CONNECTION FOR CHANGING AVAILABILITY BACK TO NORMAL
                {
                    Class.forName("com.mysql.jdbc.Driver");
                    Connection con = DriverManager.getConnection("jdbc:mysql://localhost/shop_billing","root","");
                    
                    Statement stmt = con.createStatement();
                    
                    String sql = "UPDATE dairy_stuff SET item_availability=item_availability +'"+items+"' WHERE item_name='"+Item5Name+"'"; // UPDATING AVAILABILITY BACK TO NORMAL
                    
                    stmt.executeUpdate(sql);
                    
                }
            
            catch(SQLException | ClassNotFoundException e) // EITHER SQL EXCEPTION OR CLASS NOT FOUND EXCEPTION
                {
                    System.out.println("ERROR : "+e);
                }
                
            }
        }
        else
        {
            JOptionPane.showMessageDialog(null,"This much quantity of '"+Item5Name+"' not available!","Oops!",JOptionPane.PLAIN_MESSAGE,icon4);
        }
        
    }//GEN-LAST:event_CartItem5LabelMouseClicked
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
    
    
// ------------------------------------------------------- ADD TO CART HOVER FOR ITEM5 ----------------------------------------------------------------------  
    private void CartItem5LabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CartItem5LabelMouseEntered
        Item5Label.setVisible(false);       
        Item5PriceLabel.setBackground(new java.awt.Color(244, 67, 54));
        Item5PriceLabel.setOpaque(true);
        CartItem5Label.setBackground(new java.awt.Color(244, 67, 54));
        CartItem5Label.setOpaque(true);
        CartItem5Label.setVisible(true);
    }//GEN-LAST:event_CartItem5LabelMouseEntered

    private void CartItem5LabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CartItem5LabelMouseExited
        Item5Label.setVisible(true);
        Item5PriceLabel.setBackground(new java.awt.Color(244, 68, 54));
        Item5PriceLabel.setOpaque(false);  
        CartItem5Label.setBackground(new java.awt.Color(244, 68, 54));
        CartItem5Label.setOpaque(false);
        CartItem5Label.setVisible(false);
    }//GEN-LAST:event_CartItem5LabelMouseExited

    private void Item5LabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Item5LabelMouseEntered
        Item5Label.setVisible(false);       
        Item5PriceLabel.setBackground(new java.awt.Color(244, 67, 54));
        Item5PriceLabel.setOpaque(true);
        CartItem5Label.setBackground(new java.awt.Color(244, 67, 54));
        CartItem5Label.setOpaque(true);
        CartItem5Label.setVisible(true);
    }//GEN-LAST:event_Item5LabelMouseEntered

    private void Item5LabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Item5LabelMouseExited
        Item5Label.setVisible(true);
        Item5PriceLabel.setBackground(new java.awt.Color(244, 68, 54));
        Item5PriceLabel.setOpaque(false);  
        CartItem5Label.setBackground(new java.awt.Color(244, 68, 54));
        CartItem5Label.setOpaque(false);
        CartItem5Label.setVisible(false);
    }//GEN-LAST:event_Item5LabelMouseExited
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
    
 
//--------------------------------------------------------------------- ITEM 6 -----------------------------------------------------------------------------------------
          
    
// ------------------------------------------------------------- ADDING ITEM6 TO CART ---------------------------------------------------------------   
    private void CartItem6LabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CartItem6LabelMouseClicked
        
        String[] quantity = {"0.5","1","2","3","5","7","10"}; // PREMADE ARRAY OF QUANTITY(kg)
        
        ImageIcon icon1 = new ImageIcon("E:\\SIES Practicals\\JAVA SWING\\SHOP_BILLING_PROJECT\\ShopBilling\\src\\shopbilling\\Option_Pane_Cart.png");
        ImageIcon icon2 = new ImageIcon("E:\\SIES Practicals\\JAVA SWING\\SHOP_BILLING_PROJECT\\ShopBilling\\src\\shopbilling\\Option_Pane_Cart2.png");
        ImageIcon icon3 = new ImageIcon("E:\\SIES Practicals\\JAVA SWING\\SHOP_BILLING_PROJECT\\ShopBilling\\src\\shopbilling\\Happy_smiley.png");
        ImageIcon icon4 = new ImageIcon("E:\\SIES Practicals\\JAVA SWING\\SHOP_BILLING_PROJECT\\ShopBilling\\src\\shopbilling\\Sad_smiley.png");
        
        String item = (String) JOptionPane.showInputDialog(this,"Choose Quantity!(kg)",""+Item6Name+"",JOptionPane.WARNING_MESSAGE,icon1,quantity,quantity[0]); // TAKING QUANTITY FROM USER
        Float items = Float.parseFloat(item);
        
        if(items<=Item6Availability) // CHECKING FOR AVAILABILITY (MINUS AVAILABILITY HOW MUCH THE USER CHOOSES QUANTITY)
        {
            try // JDBC CONNECTION FOR CHANGING AVAILABILITY
                {
                    Class.forName("com.mysql.jdbc.Driver");
                    Connection con = DriverManager.getConnection("jdbc:mysql://localhost/shop_billing","root","");
                    
                    Statement stmt = con.createStatement();
                    
                    String sql = "UPDATE dairy_stuff SET item_availability=item_availability -'"+items+"' WHERE item_name='"+Item6Name+"'"; // UPDATING AVAILABILITY (MINUS)
                    
                    stmt.executeUpdate(sql);
                    
                }
            
            catch(SQLException | ClassNotFoundException e) // EITHER SQL EXCEPTION OR CLASS NOT FOUND EXCEPTION
                {
                    System.out.println("ERROR : "+e);
                }
        
            //------------TOTAL ITEM6 COST WITH DISCOUNT -----------------
            float TotalItem6Cost = items*Item6Cost; // MULTIPLY ITEM6 COST*QUANTITY 
            float DItem6 = TotalItem6Cost*Item6Discount/100; // DISCOUNT
            float TotalDiscountedItem6Cost = TotalItem6Cost - DItem6; // TOTAL DISCOUNTED ITEM6 COST
            
            int Selection = JOptionPane.showOptionDialog(this,""+items+"kg × Rs"+Item6Cost+" = Rs"+TotalItem6Cost+" - Rs"+DItem6+" = Rs"+TotalDiscountedItem6Cost,"ADD TO CART",JOptionPane.YES_NO_OPTION,JOptionPane.INFORMATION_MESSAGE,icon2,null,null);


            if(Selection==0) // 0 means first option(YES)
               {
                   JOptionPane.showMessageDialog(null,""+items+"kg '"+Item6Name+"' Added To Cart!","Yaaay!",JOptionPane.PLAIN_MESSAGE,icon3);

                   try // JDBC CONNECTION FOR INSERTING ITEM6 VALUES IN THE CART
                    {
                        Class.forName("com.mysql.jdbc.Driver");
                        Connection con = DriverManager.getConnection("jdbc:mysql://localhost/shop_billing","root","");

                        String sql1 = "INSERT INTO $tableName(item_name,item_cost,item_quantity,final_cost,item_discount,discounted_final_cost) VALUES(?,?,?,?,?,?)"; // SQL QUERY putting items in database
                        
                        String sql = sql1.replace("$tableName",UserTable);
                        
                        PreparedStatement pstmt = con.prepareStatement(sql);

                        pstmt.setString(1,Item6Name);
                        pstmt.setFloat(2,Item6Cost);
                        pstmt.setFloat(3,items);
                        pstmt.setFloat(4, TotalItem6Cost);
                        pstmt.setFloat(5, DItem6);
                        pstmt.setFloat(6,TotalDiscountedItem6Cost);

                        pstmt.executeUpdate();
                        
                        
                        // FOR DISPLAYING CART NUMBER 
                        String sqlc = "SELECT COUNT(item_name) FROM $tableName"; // WE CANT USE '"+UserTable+"' ......THATS Y WE USE REPLACE
                        String sqlcc = sqlc.replace("$tableName",UserTable);
                        PreparedStatement pstmtc = con.prepareStatement(sqlcc);
                        ResultSet rs = pstmtc.executeQuery();
                        rs.next();  // MOVES POINTER TO THE FIRST POSITION
                        count = rs.getInt(1); // TAKES THE INTEGER VALUE IN FIRST COLUMN WHICH IS THE COUNT VALUE
                        CARTNUMBER.setText(Integer.toString(count));

                    }
                   catch(SQLException | ClassNotFoundException e) // EITHER SQL EXCEPTION OR CLASS NOT FOUND EXCEPTION
                    {
                        System.out.println("ERROR : "+e);
                    }
        }
            
            if(Selection==1 || Selection==-1) //1 means second option(NO).......-1 means third option(X)
            {
                
                try // JDBC CONNECTION FOR CHANGING AVAILABILITY BACK TO NORMAL
                {
                    Class.forName("com.mysql.jdbc.Driver");
                    Connection con = DriverManager.getConnection("jdbc:mysql://localhost/shop_billing","root","");
                    
                    Statement stmt = con.createStatement();
                    
                    String sql = "UPDATE dairy_stuff SET item_availability=item_availability +'"+items+"' WHERE item_name='"+Item6Name+"'"; // UPDATING AVAILABILITY BACK TO NORMAL
                    
                    stmt.executeUpdate(sql);
                    
                }
            
            catch(SQLException | ClassNotFoundException e) // EITHER SQL EXCEPTION OR CLASS NOT FOUND EXCEPTION
                {
                    System.out.println("ERROR : "+e);
                }
                
            }
        }
        else
        {
            JOptionPane.showMessageDialog(null,"This much quantity of '"+Item6Name+"' not available!","Oops!",JOptionPane.PLAIN_MESSAGE,icon4);
        }
    }//GEN-LAST:event_CartItem6LabelMouseClicked
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
    
    
// ------------------------------------------------------- ADD TO CART HOVER FOR ITEM6 ----------------------------------------------------------------------     
    private void CartItem6LabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CartItem6LabelMouseEntered
        Item6Label.setVisible(false);       
        Item6PriceLabel.setBackground(new java.awt.Color(244, 67, 54));
        Item6PriceLabel.setOpaque(true);
        CartItem6Label.setBackground(new java.awt.Color(244, 67, 54));
        CartItem6Label.setOpaque(true);
        CartItem6Label.setVisible(true);
    }//GEN-LAST:event_CartItem6LabelMouseEntered

    private void CartItem6LabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CartItem6LabelMouseExited
        Item6Label.setVisible(true);
        Item6PriceLabel.setBackground(new java.awt.Color(244, 68, 54));
        Item6PriceLabel.setOpaque(false);  
        CartItem6Label.setBackground(new java.awt.Color(244, 68, 54));
        CartItem6Label.setOpaque(false);
        CartItem6Label.setVisible(false);
    }//GEN-LAST:event_CartItem6LabelMouseExited

    private void Item6LabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Item6LabelMouseEntered
        Item6Label.setVisible(false);       
        Item6PriceLabel.setBackground(new java.awt.Color(244, 67, 54));
        Item6PriceLabel.setOpaque(true);
        CartItem6Label.setBackground(new java.awt.Color(244, 67, 54));
        CartItem6Label.setOpaque(true);
        CartItem6Label.setVisible(true);
    }//GEN-LAST:event_Item6LabelMouseEntered

    private void Item6LabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Item6LabelMouseExited
        Item6Label.setVisible(true);
        Item6PriceLabel.setBackground(new java.awt.Color(244, 68, 54));
        Item6PriceLabel.setOpaque(false);  
        CartItem6Label.setBackground(new java.awt.Color(244, 68, 54));
        CartItem6Label.setOpaque(false);
        CartItem6Label.setVisible(false);
    }//GEN-LAST:event_Item6LabelMouseExited
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
    
 
//--------------------------------------------------------------------- ITEM 7 -----------------------------------------------------------------------------------------
          
    
// ------------------------------------------------------------- ADDING ITEM7 TO CART ---------------------------------------------------------------     
    private void CartItem7LabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CartItem7LabelMouseClicked
        
        String[] quantity = {"0.5","1","2","3","5","7","10"}; // PREMADE ARRAY OF QUANTITY(kg)
        
        ImageIcon icon1 = new ImageIcon("E:\\SIES Practicals\\JAVA SWING\\SHOP_BILLING_PROJECT\\ShopBilling\\src\\shopbilling\\Option_Pane_Cart.png");
        ImageIcon icon2 = new ImageIcon("E:\\SIES Practicals\\JAVA SWING\\SHOP_BILLING_PROJECT\\ShopBilling\\src\\shopbilling\\Option_Pane_Cart2.png");
        ImageIcon icon3 = new ImageIcon("E:\\SIES Practicals\\JAVA SWING\\SHOP_BILLING_PROJECT\\ShopBilling\\src\\shopbilling\\Happy_smiley.png");
        ImageIcon icon4 = new ImageIcon("E:\\SIES Practicals\\JAVA SWING\\SHOP_BILLING_PROJECT\\ShopBilling\\src\\shopbilling\\Sad_smiley.png");
        
        String item = (String) JOptionPane.showInputDialog(this,"Choose Quantity!(kg)",""+Item7Name+"",JOptionPane.WARNING_MESSAGE,icon1,quantity,quantity[0]); // TAKING QUANTITY FROM USER
        Float items = Float.parseFloat(item);
        
        if(items<=Item7Availability) // CHECKING FOR AVAILABILITY (MINUS AVAILABILITY HOW MUCH THE USER CHOOSES QUANTITY)
        {
            try // JDBC CONNECTION FOR CHANGING AVAILABILITY
                {
                    Class.forName("com.mysql.jdbc.Driver");
                    Connection con = DriverManager.getConnection("jdbc:mysql://localhost/shop_billing","root","");
                    
                    Statement stmt = con.createStatement();
                    
                    String sql = "UPDATE dairy_stuff SET item_availability=item_availability -'"+items+"' WHERE item_name='"+Item7Name+"'"; // UPDATING AVAILABILITY (MINUS)
                    
                    stmt.executeUpdate(sql);
                    
                }
            
            catch(SQLException | ClassNotFoundException e) // EITHER SQL EXCEPTION OR CLASS NOT FOUND EXCEPTION
                {
                    System.out.println("ERROR : "+e);
                }
        
            //------------TOTAL ITEM7 COST WITH DISCOUNT -----------------
            float TotalItem7Cost = items*Item7Cost; // MULTIPLY ITEM7 COST*QUANTITY 
            float DItem7 = TotalItem7Cost*Item7Discount/100; // DISCOUNT
            float TotalDiscountedItem7Cost = TotalItem7Cost - DItem7; // TOTAL DISCOUNTED ITEM7 COST
            
            int Selection = JOptionPane.showOptionDialog(this,""+items+"kg × Rs"+Item7Cost+" = Rs"+TotalItem7Cost+" - Rs"+DItem7+" = Rs"+TotalDiscountedItem7Cost,"ADD TO CART",JOptionPane.YES_NO_OPTION,JOptionPane.INFORMATION_MESSAGE,icon2,null,null);


            if(Selection==0) // 0 means first option(YES)
               {
                   JOptionPane.showMessageDialog(null,""+items+"kg '"+Item7Name+"' Added To Cart!","Yaaay!",JOptionPane.PLAIN_MESSAGE,icon3);

                   try // JDBC CONNECTION FOR INSERTING ITEM7 VALUES IN THE CART
                    {
                        Class.forName("com.mysql.jdbc.Driver");
                        Connection con = DriverManager.getConnection("jdbc:mysql://localhost/shop_billing","root","");

                        String sql1 = "INSERT INTO $tableName(item_name,item_cost,item_quantity,final_cost,item_discount,discounted_final_cost) VALUES(?,?,?,?,?,?)"; // SQL QUERY putting items in database
                        
                        String sql = sql1.replace("$tableName",UserTable);
                        
                        PreparedStatement pstmt = con.prepareStatement(sql);

                        pstmt.setString(1,Item7Name);
                        pstmt.setFloat(2,Item7Cost);
                        pstmt.setFloat(3,items);
                        pstmt.setFloat(4, TotalItem7Cost);
                        pstmt.setFloat(5, DItem7);
                        pstmt.setFloat(6,TotalDiscountedItem7Cost);

                        pstmt.executeUpdate();
                        
                        
                        // FOR DISPLAYING CART NUMBER 
                        String sqlc = "SELECT COUNT(item_name) FROM $tableName"; // WE CANT USE '"+UserTable+"' ......THATS Y WE USE REPLACE
                        String sqlcc = sqlc.replace("$tableName",UserTable);
                        PreparedStatement pstmtc = con.prepareStatement(sqlcc);
                        ResultSet rs = pstmtc.executeQuery();
                        rs.next();  // MOVES POINTER TO THE FIRST POSITION
                        count = rs.getInt(1); // TAKES THE INTEGER VALUE IN FIRST COLUMN WHICH IS THE COUNT VALUE
                        CARTNUMBER.setText(Integer.toString(count));

                    }
                   catch(SQLException | ClassNotFoundException e) // EITHER SQL EXCEPTION OR CLASS NOT FOUND EXCEPTION
                    {
                        System.out.println("ERROR : "+e);
                    }
        }
            
            if(Selection==1 || Selection==-1) //1 means second option(NO).......-1 means third option(X)
            {
                
                try // JDBC CONNECTION FOR CHANGING AVAILABILITY BACK TO NORMAL
                {
                    Class.forName("com.mysql.jdbc.Driver");
                    Connection con = DriverManager.getConnection("jdbc:mysql://localhost/shop_billing","root","");
                    
                    Statement stmt = con.createStatement();
                    
                    String sql = "UPDATE dairy_stuff SET item_availability=item_availability +'"+items+"' WHERE item_name='"+Item7Name+"'"; // UPDATING AVAILABILITY BACK TO NORMAL
                    
                    stmt.executeUpdate(sql);
                    
                }
            
            catch(SQLException | ClassNotFoundException e) // EITHER SQL EXCEPTION OR CLASS NOT FOUND EXCEPTION
                {
                    System.out.println("ERROR : "+e);
                }
                
            }
        }
        else
        {
            JOptionPane.showMessageDialog(null,"This much quantity of '"+Item7Name+"' not available!","Oops!",JOptionPane.PLAIN_MESSAGE,icon4);
        }
    }//GEN-LAST:event_CartItem7LabelMouseClicked
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
    
    
// ------------------------------------------------------- ADD TO CART HOVER FOR ITEM7 ----------------------------------------------------------------------         
    private void CartItem7LabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CartItem7LabelMouseEntered
        Item7Label.setVisible(false);       
        Item7PriceLabel.setBackground(new java.awt.Color(244, 67, 54));
        Item7PriceLabel.setOpaque(true);
        CartItem7Label.setBackground(new java.awt.Color(244, 67, 54));
        CartItem7Label.setOpaque(true);
        CartItem7Label.setVisible(true);
    }//GEN-LAST:event_CartItem7LabelMouseEntered

    private void CartItem7LabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CartItem7LabelMouseExited
        Item7Label.setVisible(true);
        Item7PriceLabel.setBackground(new java.awt.Color(244, 68, 54));
        Item7PriceLabel.setOpaque(false);  
        CartItem7Label.setBackground(new java.awt.Color(244, 68, 54));
        CartItem7Label.setOpaque(false);
        CartItem7Label.setVisible(false);
    }//GEN-LAST:event_CartItem7LabelMouseExited

    private void Item7LabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Item7LabelMouseEntered
        Item7Label.setVisible(false);       
        Item7PriceLabel.setBackground(new java.awt.Color(244, 67, 54));
        Item7PriceLabel.setOpaque(true);
        CartItem7Label.setBackground(new java.awt.Color(244, 67, 54));
        CartItem7Label.setOpaque(true);
        CartItem7Label.setVisible(true);
    }//GEN-LAST:event_Item7LabelMouseEntered

    private void Item7LabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Item7LabelMouseExited
        Item7Label.setVisible(true);
        Item7PriceLabel.setBackground(new java.awt.Color(244, 68, 54));
        Item7PriceLabel.setOpaque(false);  
        CartItem7Label.setBackground(new java.awt.Color(244, 68, 54));
        CartItem7Label.setOpaque(false);
        CartItem7Label.setVisible(false);
    }//GEN-LAST:event_Item7LabelMouseExited
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
    
 
//--------------------------------------------------------------------- ITEM 8 -----------------------------------------------------------------------------------------
          
    
// ------------------------------------------------------------- ADDING ITEM8 TO CART ---------------------------------------------------------------      
    private void CartItem8LabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CartItem8LabelMouseClicked
        
        String[] quantity = {"0.5","1","2","3","5","7","10"}; // PREMADE ARRAY OF QUANTITY(kg)
        
        ImageIcon icon1 = new ImageIcon("E:\\SIES Practicals\\JAVA SWING\\SHOP_BILLING_PROJECT\\ShopBilling\\src\\shopbilling\\Option_Pane_Cart.png");
        ImageIcon icon2 = new ImageIcon("E:\\SIES Practicals\\JAVA SWING\\SHOP_BILLING_PROJECT\\ShopBilling\\src\\shopbilling\\Option_Pane_Cart2.png");
        ImageIcon icon3 = new ImageIcon("E:\\SIES Practicals\\JAVA SWING\\SHOP_BILLING_PROJECT\\ShopBilling\\src\\shopbilling\\Happy_smiley.png");
        ImageIcon icon4 = new ImageIcon("E:\\SIES Practicals\\JAVA SWING\\SHOP_BILLING_PROJECT\\ShopBilling\\src\\shopbilling\\Sad_smiley.png");
        
        String item = (String) JOptionPane.showInputDialog(this,"Choose Quantity!(kg)",""+Item8Name+"",JOptionPane.WARNING_MESSAGE,icon1,quantity,quantity[0]); // TAKING QUANTITY FROM USER
        Float items = Float.parseFloat(item);
        
        if(items<=Item8Availability) // CHECKING FOR AVAILABILITY (MINUS AVAILABILITY HOW MUCH THE USER CHOOSES QUANTITY)
        {
            try // JDBC CONNECTION FOR CHANGING AVAILABILITY
                {
                    Class.forName("com.mysql.jdbc.Driver");
                    Connection con = DriverManager.getConnection("jdbc:mysql://localhost/shop_billing","root","");
                    
                    Statement stmt = con.createStatement();
                    
                    String sql = "UPDATE dairy_stuff SET item_availability=item_availability -'"+items+"' WHERE item_name='"+Item8Name+"'"; // UPDATING AVAILABILITY (MINUS)
                    
                    stmt.executeUpdate(sql);
                    
                }
            
            catch(SQLException | ClassNotFoundException e) // EITHER SQL EXCEPTION OR CLASS NOT FOUND EXCEPTION
                {
                    System.out.println("ERROR : "+e);
                }
        
            //------------TOTAL ITEM8 COST WITH DISCOUNT -----------------
            float TotalItem8Cost = items*Item8Cost; // MULTIPLY ITEM8 COST*QUANTITY 
            float DItem8 = TotalItem8Cost*Item8Discount/100; // DISCOUNT
            float TotalDiscountedItem8Cost = TotalItem8Cost - DItem8; // TOTAL DISCOUNTED ITEM8 COST
            
            int Selection = JOptionPane.showOptionDialog(this,""+items+"kg × Rs"+Item8Cost+" = Rs"+TotalItem8Cost+" - Rs"+DItem8+" = Rs"+TotalDiscountedItem8Cost,"ADD TO CART",JOptionPane.YES_NO_OPTION,JOptionPane.INFORMATION_MESSAGE,icon2,null,null);


            if(Selection==0) // 0 means first option(YES)
               {
                   JOptionPane.showMessageDialog(null,""+items+"kg '"+Item8Name+"' Added To Cart!","Yaaay!",JOptionPane.PLAIN_MESSAGE,icon3);

                   try // JDBC CONNECTION FOR INSERTING ITEM8 VALUES IN THE CART
                    {
                        Class.forName("com.mysql.jdbc.Driver");
                        Connection con = DriverManager.getConnection("jdbc:mysql://localhost/shop_billing","root","");

                        String sql1 = "INSERT INTO $tableName(item_name,item_cost,item_quantity,final_cost,item_discount,discounted_final_cost) VALUES(?,?,?,?,?,?)"; // SQL QUERY putting items in database
                        
                        String sql = sql1.replace("$tableName",UserTable);
                        
                        PreparedStatement pstmt = con.prepareStatement(sql);

                        pstmt.setString(1,Item8Name);
                        pstmt.setFloat(2,Item8Cost);
                        pstmt.setFloat(3,items);
                        pstmt.setFloat(4, TotalItem8Cost);
                        pstmt.setFloat(5, DItem8);
                        pstmt.setFloat(6,TotalDiscountedItem8Cost);

                        pstmt.executeUpdate();
                        
                        
                        // FOR DISPLAYING CART NUMBER 
                        String sqlc = "SELECT COUNT(item_name) FROM $tableName"; // WE CANT USE '"+UserTable+"' ......THATS Y WE USE REPLACE
                        String sqlcc = sqlc.replace("$tableName",UserTable);
                        PreparedStatement pstmtc = con.prepareStatement(sqlcc);
                        ResultSet rs = pstmtc.executeQuery();
                        rs.next();  // MOVES POINTER TO THE FIRST POSITION
                        count = rs.getInt(1); // TAKES THE INTEGER VALUE IN FIRST COLUMN WHICH IS THE COUNT VALUE
                        CARTNUMBER.setText(Integer.toString(count));

                    }
                   catch(SQLException | ClassNotFoundException e) // EITHER SQL EXCEPTION OR CLASS NOT FOUND EXCEPTION
                    {
                        System.out.println("ERROR : "+e);
                    }
        }
            
            if(Selection==1 || Selection==-1) //1 means second option(NO).......-1 means third option(X)
            {
                
                try // JDBC CONNECTION FOR CHANGING AVAILABILITY BACK TO NORMAL
                {
                    Class.forName("com.mysql.jdbc.Driver");
                    Connection con = DriverManager.getConnection("jdbc:mysql://localhost/shop_billing","root","");
                    
                    Statement stmt = con.createStatement();
                    
                    String sql = "UPDATE dairy_stuff SET item_availability=item_availability +'"+items+"' WHERE item_name='"+Item8Name+"'"; // UPDATING AVAILABILITY BACK TO NORMAL
                    
                    stmt.executeUpdate(sql);
                    
                }
            
            catch(SQLException | ClassNotFoundException e) // EITHER SQL EXCEPTION OR CLASS NOT FOUND EXCEPTION
                {
                    System.out.println("ERROR : "+e);
                }
                
            }
        }
        else
        {
            JOptionPane.showMessageDialog(null,"This much quantity of '"+Item8Name+"' not available!","Oops!",JOptionPane.PLAIN_MESSAGE,icon4);
        }
    }//GEN-LAST:event_CartItem8LabelMouseClicked
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
    
    
// ------------------------------------------------------- ADD TO CART HOVER FOR ITEM8 ----------------------------------------------------------------------  
    private void CartItem8LabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CartItem8LabelMouseEntered
        Item8Label.setVisible(false);       
        Item8PriceLabel.setBackground(new java.awt.Color(244, 67, 54));
        Item8PriceLabel.setOpaque(true);
        CartItem8Label.setBackground(new java.awt.Color(244, 67, 54));
        CartItem8Label.setOpaque(true);
        CartItem8Label.setVisible(true);
    }//GEN-LAST:event_CartItem8LabelMouseEntered

    private void CartItem8LabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CartItem8LabelMouseExited
        Item8Label.setVisible(true);
        Item8PriceLabel.setBackground(new java.awt.Color(244, 68, 54));
        Item8PriceLabel.setOpaque(false);  
        CartItem8Label.setBackground(new java.awt.Color(244, 68, 54));
        CartItem8Label.setOpaque(false);
        CartItem8Label.setVisible(false);
    }//GEN-LAST:event_CartItem8LabelMouseExited

    private void Item8LabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Item8LabelMouseEntered
        Item8Label.setVisible(false);       
        Item8PriceLabel.setBackground(new java.awt.Color(244, 67, 54));
        Item8PriceLabel.setOpaque(true);
        CartItem8Label.setBackground(new java.awt.Color(244, 67, 54));
        CartItem8Label.setOpaque(true);
        CartItem8Label.setVisible(true);
    }//GEN-LAST:event_Item8LabelMouseEntered

    private void Item8LabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Item8LabelMouseExited
        Item8Label.setVisible(true);
        Item8PriceLabel.setBackground(new java.awt.Color(244, 68, 54));
        Item8PriceLabel.setOpaque(false);  
        CartItem8Label.setBackground(new java.awt.Color(244, 68, 54));
        CartItem8Label.setOpaque(false);
        CartItem8Label.setVisible(false);
    }//GEN-LAST:event_Item8LabelMouseExited
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
    
 
//--------------------------------------------------------------------- ITEM 9 -----------------------------------------------------------------------------------------
          
    
// ------------------------------------------------------------- ADDING ITEM9 TO CART ---------------------------------------------------------------      
    private void CartItem9LabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CartItem9LabelMouseClicked
        
        String[] quantity = {"0.5","1","2","3","5","7","10"}; // PREMADE ARRAY OF QUANTITY(kg)
        
        ImageIcon icon1 = new ImageIcon("E:\\SIES Practicals\\JAVA SWING\\SHOP_BILLING_PROJECT\\ShopBilling\\src\\shopbilling\\Option_Pane_Cart.png");
        ImageIcon icon2 = new ImageIcon("E:\\SIES Practicals\\JAVA SWING\\SHOP_BILLING_PROJECT\\ShopBilling\\src\\shopbilling\\Option_Pane_Cart2.png");
        ImageIcon icon3 = new ImageIcon("E:\\SIES Practicals\\JAVA SWING\\SHOP_BILLING_PROJECT\\ShopBilling\\src\\shopbilling\\Happy_smiley.png");
        ImageIcon icon4 = new ImageIcon("E:\\SIES Practicals\\JAVA SWING\\SHOP_BILLING_PROJECT\\ShopBilling\\src\\shopbilling\\Sad_smiley.png");
        
        String item = (String) JOptionPane.showInputDialog(this,"Choose Quantity!(kg)",""+Item9Name+"",JOptionPane.WARNING_MESSAGE,icon1,quantity,quantity[0]); // TAKING QUANTITY FROM USER
        Float items = Float.parseFloat(item);
        
        if(items<=Item9Availability) // CHECKING FOR AVAILABILITY (MINUS AVAILABILITY HOW MUCH THE USER CHOOSES QUANTITY)
        {
            try // JDBC CONNECTION FOR CHANGING AVAILABILITY
                {
                    Class.forName("com.mysql.jdbc.Driver");
                    Connection con = DriverManager.getConnection("jdbc:mysql://localhost/shop_billing","root","");
                    
                    Statement stmt = con.createStatement();
                    
                    String sql = "UPDATE dairy_stuff SET item_availability=item_availability -'"+items+"' WHERE item_name='"+Item9Name+"'"; // UPDATING AVAILABILITY (MINUS)
                    
                    stmt.executeUpdate(sql);
                    
                }
            
            catch(SQLException | ClassNotFoundException e) // EITHER SQL EXCEPTION OR CLASS NOT FOUND EXCEPTION
                {
                    System.out.println("ERROR : "+e);
                }
        
            //------------TOTAL ITEM9 COST WITH DISCOUNT -----------------
            float TotalItem9Cost = items*Item9Cost; // MULTIPLY ITEM9 COST*QUANTITY 
            float DItem9 = TotalItem9Cost*Item9Discount/100; // DISCOUNT
            float TotalDiscountedItem9Cost = TotalItem9Cost - DItem9; // TOTAL DISCOUNTED ITEM9 COST
            
            int Selection = JOptionPane.showOptionDialog(this,""+items+"kg × Rs"+Item9Cost+" = Rs"+TotalItem9Cost+" - Rs"+DItem9+" = Rs"+TotalDiscountedItem9Cost,"ADD TO CART",JOptionPane.YES_NO_OPTION,JOptionPane.INFORMATION_MESSAGE,icon2,null,null);


            if(Selection==0) // 0 means first option(YES)
               {
                   JOptionPane.showMessageDialog(null,""+items+"kg '"+Item9Name+"' Added To Cart!","Yaaay!",JOptionPane.PLAIN_MESSAGE,icon3);

                   try // JDBC CONNECTION FOR INSERTING ITEM9 VALUES IN THE CART
                    {
                        Class.forName("com.mysql.jdbc.Driver");
                        Connection con = DriverManager.getConnection("jdbc:mysql://localhost/shop_billing","root","");

                        String sql1 = "INSERT INTO $tableName(item_name,item_cost,item_quantity,final_cost,item_discount,discounted_final_cost) VALUES(?,?,?,?,?,?)"; // SQL QUERY putting items in database
                        
                        String sql = sql1.replace("$tableName",UserTable);
                        
                        PreparedStatement pstmt = con.prepareStatement(sql);

                        pstmt.setString(1,Item9Name);
                        pstmt.setFloat(2,Item9Cost);
                        pstmt.setFloat(3,items);
                        pstmt.setFloat(4, TotalItem9Cost);
                        pstmt.setFloat(5, DItem9);
                        pstmt.setFloat(6,TotalDiscountedItem9Cost);

                        pstmt.executeUpdate();
                        
                        
                        // FOR DISPLAYING CART NUMBER 
                        String sqlc = "SELECT COUNT(item_name) FROM $tableName"; // WE CANT USE '"+UserTable+"' ......THATS Y WE USE REPLACE
                        String sqlcc = sqlc.replace("$tableName",UserTable);
                        PreparedStatement pstmtc = con.prepareStatement(sqlcc);
                        ResultSet rs = pstmtc.executeQuery();
                        rs.next();  // MOVES POINTER TO THE FIRST POSITION
                        count = rs.getInt(1); // TAKES THE INTEGER VALUE IN FIRST COLUMN WHICH IS THE COUNT VALUE
                        CARTNUMBER.setText(Integer.toString(count));

                    }
                   catch(SQLException | ClassNotFoundException e) // EITHER SQL EXCEPTION OR CLASS NOT FOUND EXCEPTION
                    {
                        System.out.println("ERROR : "+e);
                    }
        }
            
            if(Selection==1 || Selection==-1) //1 means second option(NO).......-1 means third option(X)
            {
                
                try // JDBC CONNECTION FOR CHANGING AVAILABILITY BACK TO NORMAL
                {
                    Class.forName("com.mysql.jdbc.Driver");
                    Connection con = DriverManager.getConnection("jdbc:mysql://localhost/shop_billing","root","");
                    
                    Statement stmt = con.createStatement();
                    
                    String sql = "UPDATE dairy_stuff SET item_availability=item_availability +'"+items+"' WHERE item_name='"+Item9Name+"'"; // UPDATING AVAILABILITY BACK TO NORMAL
                    
                    stmt.executeUpdate(sql);
                    
                }
            
            catch(SQLException | ClassNotFoundException e) // EITHER SQL EXCEPTION OR CLASS NOT FOUND EXCEPTION
                {
                    System.out.println("ERROR : "+e);
                }
                
            }
        }
        else
        {
            JOptionPane.showMessageDialog(null,"This much quantity of '"+Item9Name+"' not available!","Oops!",JOptionPane.PLAIN_MESSAGE,icon4);
        }
    }//GEN-LAST:event_CartItem9LabelMouseClicked
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
    
    
// ------------------------------------------------------- ADD TO CART HOVER FOR ITEM9 ----------------------------------------------------------------------  
    private void CartItem9LabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CartItem9LabelMouseEntered
        Item9Label.setVisible(false);       
        Item9PriceLabel.setBackground(new java.awt.Color(244, 67, 54));
        Item9PriceLabel.setOpaque(true);
        CartItem9Label.setBackground(new java.awt.Color(244, 67, 54));
        CartItem9Label.setOpaque(true);
        CartItem9Label.setVisible(true);
    }//GEN-LAST:event_CartItem9LabelMouseEntered

    private void CartItem9LabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CartItem9LabelMouseExited
        Item9Label.setVisible(true);
        Item9PriceLabel.setBackground(new java.awt.Color(244, 68, 54));
        Item9PriceLabel.setOpaque(false);  
        CartItem9Label.setBackground(new java.awt.Color(244, 68, 54));
        CartItem9Label.setOpaque(false);
        CartItem9Label.setVisible(false);
    }//GEN-LAST:event_CartItem9LabelMouseExited

    private void Item9LabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Item9LabelMouseEntered
        Item9Label.setVisible(false);       
        Item9PriceLabel.setBackground(new java.awt.Color(244, 67, 54));
        Item9PriceLabel.setOpaque(true);
        CartItem9Label.setBackground(new java.awt.Color(244, 67, 54));
        CartItem9Label.setOpaque(true);
        CartItem9Label.setVisible(true);
    }//GEN-LAST:event_Item9LabelMouseEntered

    private void Item9LabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Item9LabelMouseExited
        Item9Label.setVisible(true);
        Item9PriceLabel.setBackground(new java.awt.Color(244, 68, 54));
        Item9PriceLabel.setOpaque(false);  
        CartItem9Label.setBackground(new java.awt.Color(244, 68, 54));
        CartItem9Label.setOpaque(false);
        CartItem9Label.setVisible(false);
    }//GEN-LAST:event_Item9LabelMouseExited
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
    
 
//--------------------------------------------------------------------- ITEM 10 -----------------------------------------------------------------------------------------
          
    
// ------------------------------------------------------------- ADDING ITEM10 TO CART ---------------------------------------------------------------        
    private void CartItem10LabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CartItem10LabelMouseClicked
        String[] quantity = {"0.5","1","2","3","5","7","10"}; // PREMADE ARRAY OF QUANTITY(kg)
        
        ImageIcon icon1 = new ImageIcon("E:\\SIES Practicals\\JAVA SWING\\SHOP_BILLING_PROJECT\\ShopBilling\\src\\shopbilling\\Option_Pane_Cart.png");
        ImageIcon icon2 = new ImageIcon("E:\\SIES Practicals\\JAVA SWING\\SHOP_BILLING_PROJECT\\ShopBilling\\src\\shopbilling\\Option_Pane_Cart2.png");
        ImageIcon icon3 = new ImageIcon("E:\\SIES Practicals\\JAVA SWING\\SHOP_BILLING_PROJECT\\ShopBilling\\src\\shopbilling\\Happy_smiley.png");
        ImageIcon icon4 = new ImageIcon("E:\\SIES Practicals\\JAVA SWING\\SHOP_BILLING_PROJECT\\ShopBilling\\src\\shopbilling\\Sad_smiley.png");
        
        String item = (String) JOptionPane.showInputDialog(this,"Choose Quantity!(kg)",""+Item10Name+"",JOptionPane.WARNING_MESSAGE,icon1,quantity,quantity[0]); // TAKING QUANTITY FROM USER
        Float items = Float.parseFloat(item);
        
        if(items<=Item10Availability) // CHECKING FOR AVAILABILITY (MINUS AVAILABILITY HOW MUCH THE USER CHOOSES QUANTITY)
        {
            try // JDBC CONNECTION FOR CHANGING AVAILABILITY
                {
                    Class.forName("com.mysql.jdbc.Driver");
                    Connection con = DriverManager.getConnection("jdbc:mysql://localhost/shop_billing","root","");
                    
                    Statement stmt = con.createStatement();
                    
                    String sql = "UPDATE dairy_stuff SET item_availability=item_availability -'"+items+"' WHERE item_name='"+Item10Name+"'"; // UPDATING AVAILABILITY (MINUS)
                    
                    stmt.executeUpdate(sql);
                    
                }
            
            catch(SQLException | ClassNotFoundException e) // EITHER SQL EXCEPTION OR CLASS NOT FOUND EXCEPTION
                {
                    System.out.println("ERROR : "+e);
                }
        
            //------------TOTAL ITEM10 COST WITH DISCOUNT -----------------
            float TotalItem10Cost = items*Item10Cost; // MULTIPLY ITEM10 COST*QUANTITY 
            float DItem10 = TotalItem10Cost*Item10Discount/100; // DISCOUNT
            float TotalDiscountedItem10Cost = TotalItem10Cost - DItem10; // TOTAL DISCOUNTED ITEM10 COST
            
            int Selection = JOptionPane.showOptionDialog(this,""+items+"kg × Rs"+Item10Cost+" = Rs"+TotalItem10Cost+" - Rs"+DItem10+" = Rs"+TotalDiscountedItem10Cost,"ADD TO CART",JOptionPane.YES_NO_OPTION,JOptionPane.INFORMATION_MESSAGE,icon2,null,null);


            if(Selection==0) // 0 means first option(YES)
               {
                   JOptionPane.showMessageDialog(null,""+items+"kg '"+Item10Name+"' Added To Cart!","Yaaay!",JOptionPane.PLAIN_MESSAGE,icon3);

                   try // JDBC CONNECTION FOR INSERTING ITEM10 VALUES IN THE CART
                    {
                        Class.forName("com.mysql.jdbc.Driver");
                        Connection con = DriverManager.getConnection("jdbc:mysql://localhost/shop_billing","root","");

                        String sql1 = "INSERT INTO $tableName(item_name,item_cost,item_quantity,final_cost,item_discount,discounted_final_cost) VALUES(?,?,?,?,?,?)"; // SQL QUERY putting items in database
                        
                        String sql = sql1.replace("$tableName",UserTable);
                        
                        PreparedStatement pstmt = con.prepareStatement(sql);

                        pstmt.setString(1,Item10Name);
                        pstmt.setFloat(2,Item10Cost);
                        pstmt.setFloat(3,items);
                        pstmt.setFloat(4, TotalItem10Cost);
                        pstmt.setFloat(5, DItem10);
                        pstmt.setFloat(6,TotalDiscountedItem10Cost);

                        pstmt.executeUpdate();
                        
                        
                        // FOR DISPLAYING CART NUMBER 
                        String sqlc = "SELECT COUNT(item_name) FROM $tableName"; // WE CANT USE '"+UserTable+"' ......THATS Y WE USE REPLACE
                        String sqlcc = sqlc.replace("$tableName",UserTable);
                        PreparedStatement pstmtc = con.prepareStatement(sqlcc);
                        ResultSet rs = pstmtc.executeQuery();
                        rs.next();  // MOVES POINTER TO THE FIRST POSITION
                        count = rs.getInt(1); // TAKES THE INTEGER VALUE IN FIRST COLUMN WHICH IS THE COUNT VALUE
                        CARTNUMBER.setText(Integer.toString(count));

                    }
                   catch(SQLException | ClassNotFoundException e) // EITHER SQL EXCEPTION OR CLASS NOT FOUND EXCEPTION
                    {
                        System.out.println("ERROR : "+e);
                    }
        }
            
            if(Selection==1 || Selection==-1) //1 means second option(NO).......-1 means third option(X)
            {
                
                try // JDBC CONNECTION FOR CHANGING AVAILABILITY BACK TO NORMAL
                {
                    Class.forName("com.mysql.jdbc.Driver");
                    Connection con = DriverManager.getConnection("jdbc:mysql://localhost/shop_billing","root","");
                    
                    Statement stmt = con.createStatement();
                    
                    String sql = "UPDATE dairy_stuff SET item_availability=item_availability +'"+items+"' WHERE item_name='"+Item10Name+"'"; // UPDATING AVAILABILITY BACK TO NORMAL
                    
                    stmt.executeUpdate(sql);
                    
                }
            
            catch(SQLException | ClassNotFoundException e) // EITHER SQL EXCEPTION OR CLASS NOT FOUND EXCEPTION
                {
                    System.out.println("ERROR : "+e);
                }
                
            }
        }
        else
        {
            JOptionPane.showMessageDialog(null,"This much quantity of '"+Item10Name+"' not available!","Oops!",JOptionPane.PLAIN_MESSAGE,icon4);
        }
    }//GEN-LAST:event_CartItem10LabelMouseClicked
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
    
    
// ------------------------------------------------------- ADD TO CART HOVER FOR ITEM10 ----------------------------------------------------------------------  
    private void CartItem10LabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CartItem10LabelMouseEntered
        Item10Label.setVisible(false);       
        Item10PriceLabel.setBackground(new java.awt.Color(244, 67, 54));
        Item10PriceLabel.setOpaque(true);
        CartItem10Label.setBackground(new java.awt.Color(244, 67, 54));
        CartItem10Label.setOpaque(true);
        CartItem10Label.setVisible(true);
    }//GEN-LAST:event_CartItem10LabelMouseEntered

    private void CartItem10LabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CartItem10LabelMouseExited
        Item10Label.setVisible(true);
        Item10PriceLabel.setBackground(new java.awt.Color(244, 68, 54));
        Item10PriceLabel.setOpaque(false);  
        CartItem10Label.setBackground(new java.awt.Color(244, 68, 54));
        CartItem10Label.setOpaque(false);
        CartItem10Label.setVisible(false);
    }//GEN-LAST:event_CartItem10LabelMouseExited

    private void Item10LabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Item10LabelMouseEntered
        Item10Label.setVisible(false);       
        Item10PriceLabel.setBackground(new java.awt.Color(244, 67, 54));
        Item10PriceLabel.setOpaque(true);
        CartItem10Label.setBackground(new java.awt.Color(244, 67, 54));
        CartItem10Label.setOpaque(true);
        CartItem10Label.setVisible(true);
    }//GEN-LAST:event_Item10LabelMouseEntered

    private void Item10LabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Item10LabelMouseExited
        Item10Label.setVisible(true);
        Item10PriceLabel.setBackground(new java.awt.Color(244, 68, 54));
        Item10PriceLabel.setOpaque(false);  
        CartItem10Label.setBackground(new java.awt.Color(244, 68, 54));
        CartItem10Label.setOpaque(false);
        CartItem10Label.setVisible(false);
    }//GEN-LAST:event_Item10LabelMouseExited
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
    
// ------------------------------------------------------ CLICKING ON ALL THE TABS ON TOP -----------------------------------------------------------------------------------------            

//------------------------------------------------------------- CLICKING DAILY STAPLES -------------------------------------------------------------------------------------------------
    private void DailyStaplesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DailyStaplesMouseClicked
        new DailyStaples(UserTable).setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_DailyStaplesMouseClicked

 //------------------------------------------------------------- CLICKING PACKAGED FOOD --------------------------------------------------------------------------------------------
    private void PackagedFoodMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PackagedFoodMouseClicked
        new PackagedFood(UserTable).setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_PackagedFoodMouseClicked

// ------------------------------------------------------------- CLICKING ON CART -----------------------------------------------------------------------------------------        
    private void CARTMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CARTMouseClicked
        new CartPage(UserTable).setVisible(true);
    }//GEN-LAST:event_CARTMouseClicked

    
// --------------------------------------------------- WHEN DAIRY STUFF WINDOW IS ACTIVATED ------------------------------------------------      
    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        try // JDBC CONNECTION FOR DISPLAYING CART NUMBER ON THE MAIN PAGE BASED ON THE PARTICULAR USER ACCOUNT
                    {
                        Class.forName("com.mysql.jdbc.Driver");
                        Connection con = DriverManager.getConnection("jdbc:mysql://localhost/shop_billing","root","");
                        
                        // FOR DISPLAYING CART NUMBER 
                        String sqlc = "SELECT COUNT(item_name) FROM $tableName"; // WE CANT USE '"+UserTable+"' ......THATS Y WE USE REPLACE
                        String sqlcc = sqlc.replace("$tableName",UserTable);
                        PreparedStatement pstmtc = con.prepareStatement(sqlcc);
                        ResultSet rs = pstmtc.executeQuery();
                        rs.next(); // MOVES POINTER TO FIRST POSITION
                        count = rs.getInt(1); // TAKES THE INTEGER VALUE IN FIRST COLUMN WHICH IS THE COUNT VALUE
                        CARTNUMBER.setText(Integer.toString(count));
                        
                       
                    }    
                    catch(SQLException | ClassNotFoundException e) // EITHER SQL EXCEPTION OR CLASS NOT FOUND EXCEPTION
                    {
                        System.out.println("ERROR : "+e);
                    }
    }//GEN-LAST:event_formWindowActivated
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
    
    
    

//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Windows".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(DailyStaples.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(DailyStaples.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(DailyStaples.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(DailyStaples.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new DailyStaples("").setVisible(true);
//            }
//        });
//    }
    
    
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel BasePanel;
    private javax.swing.JLabel Beverages;
    private javax.swing.JLabel CART;
    private javax.swing.JLabel CARTNUMBER;
    private javax.swing.JLabel CartItem10Label;
    private javax.swing.JLabel CartItem1Label;
    private javax.swing.JLabel CartItem2Label;
    private javax.swing.JLabel CartItem3Label;
    private javax.swing.JLabel CartItem4Label;
    private javax.swing.JLabel CartItem5Label;
    private javax.swing.JLabel CartItem6Label;
    private javax.swing.JLabel CartItem7Label;
    private javax.swing.JLabel CartItem8Label;
    private javax.swing.JLabel CartItem9Label;
    private javax.swing.JLabel DailyStaples;
    private javax.swing.JLabel DairyStuff;
    private javax.swing.JLabel Fruits;
    private javax.swing.JLabel Item10DiscountLabel;
    private javax.swing.JLabel Item10Image;
    private javax.swing.JLabel Item10Label;
    private javax.swing.JPanel Item10Panel;
    private javax.swing.JLabel Item10PriceLabel;
    private javax.swing.JLabel Item1DiscountLabel;
    private javax.swing.JLabel Item1Image;
    private javax.swing.JLabel Item1Label;
    private javax.swing.JPanel Item1Panel;
    private javax.swing.JLabel Item1PriceLabel;
    private javax.swing.JLabel Item2DiscountLabel;
    private javax.swing.JLabel Item2Image;
    private javax.swing.JLabel Item2Label;
    private javax.swing.JPanel Item2Panel;
    private javax.swing.JLabel Item2PriceLabel;
    private javax.swing.JLabel Item3DiscountLabel;
    private javax.swing.JLabel Item3Image;
    private javax.swing.JLabel Item3Label;
    private javax.swing.JPanel Item3Panel;
    private javax.swing.JLabel Item3PriceLabel;
    private javax.swing.JLabel Item4DiscountLabel;
    private javax.swing.JLabel Item4Image;
    private javax.swing.JLabel Item4Label;
    private javax.swing.JPanel Item4Panel;
    private javax.swing.JLabel Item4PriceLabel;
    private javax.swing.JLabel Item5DiscountLabel;
    private javax.swing.JLabel Item5Image;
    private javax.swing.JLabel Item5Label;
    private javax.swing.JPanel Item5Panel;
    private javax.swing.JLabel Item5PriceLabel;
    private javax.swing.JLabel Item6DiscountLabel;
    private javax.swing.JLabel Item6Image;
    private javax.swing.JLabel Item6Label;
    private javax.swing.JPanel Item6Panel;
    private javax.swing.JLabel Item6PriceLabel;
    private javax.swing.JLabel Item7DiscountLabel;
    private javax.swing.JLabel Item7Image;
    private javax.swing.JLabel Item7Label;
    private javax.swing.JPanel Item7Panel;
    private javax.swing.JLabel Item7PriceLabel;
    private javax.swing.JLabel Item8DiscountLabel;
    private javax.swing.JLabel Item8Image;
    private javax.swing.JLabel Item8Label;
    private javax.swing.JPanel Item8Panel;
    private javax.swing.JLabel Item8PriceLabel;
    private javax.swing.JLabel Item9DiscountLabel;
    private javax.swing.JLabel Item9Image;
    private javax.swing.JLabel Item9Label;
    private javax.swing.JPanel Item9Panel;
    private javax.swing.JLabel Item9PriceLabel;
    private javax.swing.JLabel PackagedFood;
    private javax.swing.JLabel PersonalCare;
    private javax.swing.JLabel RedCross;
    private javax.swing.JLabel Snacks;
    private javax.swing.JLabel TableBg;
    private javax.swing.JLabel Vegetables;
    // End of variables declaration//GEN-END:variables
}
